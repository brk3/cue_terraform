// Generated by cue-terraform-gen (https://github.com/tnarg/cue_terraform_gen). DO NOT EDIT.
package rancher2

#Rancher2AppResource: {
	catalog_name:     string
	name:             string
	project_id:       string
	target_namespace: string
	template_name:    string
	answers?: [_]: string
	force_upgrade?: bool
	values_yaml?:   string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2AuthConfigActivedirectoryResource: {
	servers: [string, ...]
	service_account_password: string
	service_account_username: string
	user_search_base:         string
	access_mode?:             string
	allowed_principal_ids?: [string, ...]
	certificate?:            string
	connection_timeout?:     number
	default_login_domain?:   string
	enabled?:                bool
	port?:                   number
	user_disabled_bit_mask?: number
}
#Rancher2AuthConfigAdfsResource: {
	display_name_field:   string
	groups_field:         string
	idp_metadata_content: string
	rancher_api_host:     string
	sp_cert:              string
	sp_key:               string
	uid_field:            string
	user_name_field:      string
	access_mode?:         string
	allowed_principal_ids?: [string, ...]
	enabled?: bool
}
#Rancher2AuthConfigAzureadResource: {
	application_id:     string
	application_secret: string
	auth_endpoint:      string
	graph_endpoint:     string
	rancher_url:        string
	tenant_id:          string
	token_endpoint:     string
	access_mode?:       string
	allowed_principal_ids?: [string, ...]
	enabled?:  bool
	endpoint?: string
}
#Rancher2AuthConfigFreeipaResource: {
	servers: [string, ...]
	service_account_distinguished_name: string
	service_account_password:           string
	user_search_base:                   string
	access_mode?:                       string
	allowed_principal_ids?: [string, ...]
	certificate?:        string
	connection_timeout?: number
	enabled?:            bool
	port?:               number
}
#Rancher2AuthConfigGithubResource: {
	client_id:     string
	client_secret: string
	access_mode?:  string
	allowed_principal_ids?: [string, ...]
	enabled?:  bool
	hostname?: string
	tls?:      bool
}
#Rancher2AuthConfigKeycloakResource: {
	display_name_field:   string
	groups_field:         string
	idp_metadata_content: string
	rancher_api_host:     string
	sp_cert:              string
	sp_key:               string
	uid_field:            string
	user_name_field:      string
	access_mode?:         string
	allowed_principal_ids?: [string, ...]
	enabled?: bool
}
#Rancher2AuthConfigOktaResource: {
	display_name_field:   string
	groups_field:         string
	idp_metadata_content: string
	rancher_api_host:     string
	sp_cert:              string
	sp_key:               string
	uid_field:            string
	user_name_field:      string
	access_mode?:         string
	allowed_principal_ids?: [string, ...]
	enabled?: bool
}
#Rancher2AuthConfigOpenldapResource: {
	servers: [string, ...]
	service_account_distinguished_name: string
	service_account_password:           string
	user_search_base:                   string
	access_mode?:                       string
	allowed_principal_ids?: [string, ...]
	certificate?:        string
	connection_timeout?: number
	enabled?:            bool
	port?:               number
}
#Rancher2AuthConfigPingResource: {
	display_name_field:   string
	groups_field:         string
	idp_metadata_content: string
	rancher_api_host:     string
	sp_cert:              string
	sp_key:               string
	uid_field:            string
	user_name_field:      string
	access_mode?:         string
	allowed_principal_ids?: [string, ...]
	enabled?: bool
}
#Rancher2BootstrapResource: {
	telemetry?:    bool
	token_ttl?:    number
	token_update?: bool
}
#Rancher2CatalogResource: {
	name:         string
	url:          string
	branch?:      string
	cluster_id?:  string
	description?: string
	kind?:        string
	password?:    string
	project_id?:  string
	refresh?:     bool
	scope?:       string
	username?:    string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2CertificateResource: {
	certs:         string
	key:           string
	project_id:    string
	description?:  string
	name?:         string
	namespace_id?: string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2CloudCredentialResource: {
	name: string
	annotations?: [_]: string
	description?: string
	amazonec2_credential_config?: [{
		access_key: string
		secret_key: string
	}, ...]
	azure_credential_config?: [{
		client_id:       string
		client_secret:   string
		subscription_id: string
	}, ...]
	digitalocean_credential_config?: [{
		access_token: string
	}, ...]
	linode_credential_config?: [{
		token: string
	}, ...]
	openstack_credential_config?: [{
		password: string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
	vsphere_credential_config?: [{
		password:      string
		username:      string
		vcenter:       string
		vcenter_port?: string
	}, ...]
}
#Rancher2ClusterResource: {
	name:                          string
	cluster_template_id?:          string
	cluster_template_revision_id?: string
	description?:                  string
	enable_cluster_alerting?:      bool
	enable_cluster_istio?:         bool
	enable_cluster_monitoring?:    bool
	enable_network_policy?:        bool
	windows_prefered_cluster?:     bool
	aks_config?: [{
		agent_dns_prefix:                        string
		client_id:                               string
		client_secret:                           string
		kubernetes_version:                      string
		master_dns_prefix:                       string
		resource_group:                          string
		ssh_public_key_contents:                 string
		subnet:                                  string
		subscription_id:                         string
		tenant_id:                               string
		virtual_network:                         string
		virtual_network_resource_group:          string
		aad_server_app_secret?:                  string
		aad_tenant_id?:                          string
		add_client_app_id?:                      string
		add_server_app_id?:                      string
		admin_username?:                         string
		agent_os_disk_size?:                     number
		agent_pool_name?:                        string
		agent_storage_profile?:                  string
		agent_vm_size?:                          string
		auth_base_url?:                          string
		base_url?:                               string
		count?:                                  number
		dns_service_ip?:                         string
		docker_bridge_cidr?:                     string
		enable_http_application_routing?:        bool
		enable_monitoring?:                      bool
		location?:                               string
		log_analytics_workspace?:                string
		log_analytics_workspace_resource_group?: string
		max_pods?:                               number
		network_plugin?:                         string
		network_policy?:                         string
		pod_cidr?:                               string
		service_cidr?:                           string
	}, ...]
	cluster_auth_endpoint?: [{
		ca_certs?: string
		enabled?:  bool
		fqdn?:     string
	}, ...]
	cluster_monitoring_input?: [{
		answers?: [_]: string
		version?: string
	}, ...]
	cluster_template_answers?: [{}, ...]
	cluster_template_questions?: [{
		default:   string
		variable:  string
		required?: bool
		type?:     string
	}, ...]
	eks_config?: [{
		access_key:                       string
		kubernetes_version:               string
		secret_key:                       string
		ami?:                             string
		associate_worker_node_public_ip?: bool
		desired_nodes?:                   number
		instance_type?:                   string
		key_pair_name?:                   string
		maximum_nodes?:                   number
		minimum_nodes?:                   number
		node_volume_size?:                number
		region?:                          string
		security_groups?: [string, ...]
		service_role?:  string
		session_token?: string
		subnets?: [string, ...]
		virtual_network?: string
	}, ...]
	gke_config?: [{
		cluster_ipv4_cidr:                       string
		credential:                              string
		disk_type:                               string
		image_type:                              string
		ip_policy_cluster_ipv4_cidr_block:       string
		ip_policy_cluster_secondary_range_name:  string
		ip_policy_node_ipv4_cidr_block:          string
		ip_policy_services_ipv4_cidr_block:      string
		ip_policy_services_secondary_range_name: string
		ip_policy_subnetwork_name:               string
		locations: [string, ...]
		machine_type:           string
		maintenance_window:     string
		master_ipv4_cidr_block: string
		master_version:         string
		network:                string
		node_pool:              string
		node_version:           string
		oauth_scopes: [string, ...]
		project_id:                         string
		service_account:                    string
		sub_network:                        string
		description?:                       string
		disk_size_gb?:                      number
		enable_alpha_feature?:              bool
		enable_auto_repair?:                bool
		enable_auto_upgrade?:               bool
		enable_horizontal_pod_autoscaling?: bool
		enable_http_load_balancing?:        bool
		enable_kubernetes_dashboard?:       bool
		enable_legacy_abac?:                bool
		enable_master_authorized_network?:  bool
		enable_network_policy_config?:      bool
		enable_nodepool_autoscaling?:       bool
		enable_private_endpoint?:           bool
		enable_private_nodes?:              bool
		enable_stackdriver_logging?:        bool
		enable_stackdriver_monitoring?:     bool
		ip_policy_create_subnetwork?:       bool
		issue_client_certificate?:          bool
		kubernetes_dashboard?:              bool
		local_ssd_count?:                   number
		master_authorized_network_cidr_blocks?: [string, ...]
		max_node_count?: number
		min_node_count?: number
		node_count?:     number
		preemptible?:    bool
		taints?: [string, ...]
		use_ip_aliases?: bool
		zone?:           string
	}, ...]
	k3s_config?: [{
		upgrade_strategy?: [{
			drain_server_nodes?: bool
			drain_worker_nodes?: bool
			server_concurrency?: number
			worker_concurrency?: number
		}, ...]
	}, ...]
	rke_config?: [{
		addons?: string
		addons_include?: [string, ...]
		ignore_docker_version?: bool
		ssh_agent_auth?:        bool
		authentication?: [{}, ...]
		authorization?: [{
			mode?: string
		}, ...]
		bastion_host?: [{
			address:         string
			user:            string
			port?:           string
			ssh_agent_auth?: bool
		}, ...]
		cloud_provider?: [{
			aws_cloud_provider?: [{
				global?: [{
					disable_security_group_ingress?: bool
					disable_strict_zone_check?:      bool
				}, ...]
				service_override?: [{
					service: string
				}, ...]
			}, ...]
			azure_cloud_provider?: [{
				aad_client_id:     string
				aad_client_secret: string
				subscription_id:   string
				tenant_id:         string
			}, ...]
			openstack_cloud_provider?: [{
				block_storage?: [{}, ...]
				global?: [{
					auth_url: string
					password: string
					username: string
				}, ...]
				load_balancer?: [{
					monitor_delay?:       string
					monitor_max_retries?: number
					monitor_timeout?:     string
				}, ...]
				metadata?: [{}, ...]
				route?: [{}, ...]
			}, ...]
			vsphere_cloud_provider?: [{
				disk?: [{}, ...]
				global?: [{}, ...]
				network?: [{}, ...]
				virtual_center?: [{
					datacenters: string
					name:        string
					password:    string
					user:        string
				}, ...]
				workspace?: [{
					datacenter: string
					folder:     string
					server:     string
				}, ...]
			}, ...]
		}, ...]
		dns?: [{
			provider?: string
		}, ...]
		ingress?: [{}, ...]
		monitoring?: [{}, ...]
		network?: [{
			mtu?: number
			calico_network_provider?: [{}, ...]
			canal_network_provider?: [{}, ...]
			flannel_network_provider?: [{}, ...]
			weave_network_provider?: [{
				password: string
			}, ...]
		}, ...]
		nodes?: [{
			address: string
			role: [string, ...]
			user:               string
			hostname_override?: string
			internal_address?:  string
			labels?: [_]: string
			node_id?:        string
			port?:           string
			ssh_agent_auth?: bool
		}, ...]
		private_registries?: [{
			url:         string
			is_default?: bool
			password?:   string
			user?:       string
		}, ...]
		services?: [{
			etcd?: [{
				external_urls?: [string, ...]
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
				gid?: number
				uid?: number
				backup_config?: [{
					enabled?:        bool
					interval_hours?: number
					retention?:      number
					safe_timestamp?: bool
					s3_backup_config?: [{
						bucket_name: string
						endpoint:    string
						access_key?: string
						custom_ca?:  string
						folder?:     string
						region?:     string
						secret_key?: string
					}, ...]
				}, ...]
			}, ...]
			kube_api?: [{
				admission_configuration?: [_]: string
				always_pull_images?: bool
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
				pod_security_policy?: bool
				audit_log?: [{
					enabled?: bool
					configuration?: [{
						format?:     string
						max_age?:    number
						max_backup?: number
						max_size?:   number
						path?:       string
					}, ...]
				}, ...]
				event_rate_limit?: [{
					configuration?: [_]: string
					enabled?: bool
				}, ...]
				secrets_encryption_config?: [{
					custom_config?: [_]: string
					enabled?: bool
				}, ...]
			}, ...]
			kube_controller?: [{
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
			}, ...]
			kubelet?: [{
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
				generate_serving_certificate?: bool
			}, ...]
			kubeproxy?: [{
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
			}, ...]
			scheduler?: [{
				extra_binds?: [string, ...]
				extra_env?: [string, ...]
			}, ...]
		}, ...]
		upgrade_strategy?: [{
			drain?:                        bool
			max_unavailable_controlplane?: string
			max_unavailable_worker?:       string
			drain_input?: [{
				delete_local_data?:  bool
				force?:              bool
				grace_period?:       number
				ignore_daemon_sets?: bool
				timeout?:            number
			}, ...]
		}, ...]
	}, ...]
	scheduled_cluster_scan?: [{
		enabled?: bool
		scan_config?: [{
			cis_scan_config?: [{
				debug_master?:               bool
				debug_worker?:               bool
				override_benchmark_version?: string
				override_skip?: [string, ...]
				profile?: string
			}, ...]
		}, ...]
		schedule_config?: [{
			cron_schedule: string
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterAlertGroupResource: {
	cluster_id:               string
	name:                     string
	description?:             string
	group_interval_seconds?:  number
	group_wait_seconds?:      number
	repeat_interval_seconds?: number
	recipients?: [{
		notifier_id:        string
		default_recipient?: bool
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterAlertRuleResource: {
	cluster_id:               string
	group_id:                 string
	name:                     string
	group_interval_seconds?:  number
	group_wait_seconds?:      number
	inherited?:               bool
	repeat_interval_seconds?: number
	severity?:                string
	event_rule?: [{
		resource_kind: string
		event_type?:   string
	}, ...]
	metric_rule?: [{
		duration:        string
		expression:      string
		threshold_value: number
		comparison?:     string
		description?:    string
	}, ...]
	node_rule?: [{
		condition?:     string
		cpu_threshold?: number
		mem_threshold?: number
		node_id?:       string
		selector?: [_]: string
	}, ...]
	system_service_rule?: [{
		condition?: string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterDriverResource: {
	active:      bool
	builtin:     bool
	name:        string
	url:         string
	actual_url?: string
	checksum?:   string
	ui_url?:     string
	whitelist_domains?: [string, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterLoggingResource: {
	cluster_id:             string
	kind:                   string
	name:                   string
	enable_json_parsing?:   bool
	namespace_id?:          string
	output_flush_interval?: number
	custom_target_config?: [{
		content:      string
		certificate?: string
		client_cert?: string
		client_key?:  string
	}, ...]
	elasticsearch_config?: [{
		endpoint:         string
		auth_password?:   string
		auth_username?:   string
		certificate?:     string
		client_cert?:     string
		client_key?:      string
		client_key_pass?: string
		date_format?:     string
		index_prefix?:    string
		ssl_version?:     string
	}, ...]
	fluentd_config?: [{
		certificate?: string
		compress?:    bool
		enable_tls?:  bool
		fluent_servers?: [{
			endpoint:    string
			hostname?:   string
			password?:   string
			shared_key?: string
			standby?:    bool
			username?:   string
			weight?:     number
		}, ...]
	}, ...]
	kafka_config?: [{
		topic: string
		broker_endpoints?: [string, ...]
		certificate?:        string
		client_cert?:        string
		client_key?:         string
		zookeeper_endpoint?: string
	}, ...]
	splunk_config?: [{
		endpoint:         string
		token:            string
		certificate?:     string
		client_cert?:     string
		client_key?:      string
		client_key_pass?: string
		index?:           string
		source?:          string
	}, ...]
	syslog_config?: [{
		endpoint:     string
		certificate?: string
		client_cert?: string
		client_key?:  string
		program?:     string
		protocol?:    string
		severity?:    string
		token?:       string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterRoleTemplateBindingResource: {
	cluster_id:       string
	name:             string
	role_template_id: string
	group_id?:        string
	user_id?:         string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterSyncResource: {
	cluster_id: string
	node_pool_ids?: [string, ...]
	synced?:          bool
	wait_monitoring?: bool
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ClusterTemplateResource: {
	name:         string
	description?: string
	members?: [{
		access_type?:        string
		group_principal_id?: string
		user_principal_id?:  string
	}, ...]
	template_revisions?: [{
		name:     string
		default?: bool
		enabled?: bool
		cluster_config?: [{
			enable_cluster_alerting?:   bool
			enable_cluster_monitoring?: bool
			enable_network_policy?:     bool
			windows_prefered_cluster?:  bool
			cluster_auth_endpoint?: [{
				ca_certs?: string
				enabled?:  bool
				fqdn?:     string
			}, ...]
			rke_config?: [{
				addons?: string
				addons_include?: [string, ...]
				ignore_docker_version?: bool
				ssh_agent_auth?:        bool
				authentication?: [{}, ...]
				authorization?: [{
					mode?: string
				}, ...]
				bastion_host?: [{
					address:         string
					user:            string
					port?:           string
					ssh_agent_auth?: bool
				}, ...]
				cloud_provider?: [{
					aws_cloud_provider?: [{
						global?: [{
							disable_security_group_ingress?: bool
							disable_strict_zone_check?:      bool
						}, ...]
						service_override?: [{
							service: string
						}, ...]
					}, ...]
					azure_cloud_provider?: [{
						aad_client_id:     string
						aad_client_secret: string
						subscription_id:   string
						tenant_id:         string
					}, ...]
					openstack_cloud_provider?: [{
						block_storage?: [{}, ...]
						global?: [{
							auth_url: string
							password: string
							username: string
						}, ...]
						load_balancer?: [{
							monitor_delay?:       string
							monitor_max_retries?: number
							monitor_timeout?:     string
						}, ...]
						metadata?: [{}, ...]
						route?: [{}, ...]
					}, ...]
					vsphere_cloud_provider?: [{
						disk?: [{}, ...]
						global?: [{}, ...]
						network?: [{}, ...]
						virtual_center?: [{
							datacenters: string
							name:        string
							password:    string
							user:        string
						}, ...]
						workspace?: [{
							datacenter: string
							folder:     string
							server:     string
						}, ...]
					}, ...]
				}, ...]
				dns?: [{
					provider?: string
				}, ...]
				ingress?: [{}, ...]
				monitoring?: [{}, ...]
				network?: [{
					mtu?: number
					calico_network_provider?: [{}, ...]
					canal_network_provider?: [{}, ...]
					flannel_network_provider?: [{}, ...]
					weave_network_provider?: [{
						password: string
					}, ...]
				}, ...]
				nodes?: [{
					address: string
					role: [string, ...]
					user:               string
					hostname_override?: string
					internal_address?:  string
					labels?: [_]: string
					node_id?:        string
					port?:           string
					ssh_agent_auth?: bool
				}, ...]
				private_registries?: [{
					url:         string
					is_default?: bool
					password?:   string
					user?:       string
				}, ...]
				services?: [{
					etcd?: [{
						external_urls?: [string, ...]
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
						gid?: number
						uid?: number
						backup_config?: [{
							enabled?:        bool
							interval_hours?: number
							retention?:      number
							safe_timestamp?: bool
							s3_backup_config?: [{
								bucket_name: string
								endpoint:    string
								access_key?: string
								custom_ca?:  string
								folder?:     string
								region?:     string
								secret_key?: string
							}, ...]
						}, ...]
					}, ...]
					kube_api?: [{
						admission_configuration?: [_]: string
						always_pull_images?: bool
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
						pod_security_policy?: bool
						audit_log?: [{
							enabled?: bool
							configuration?: [{
								format?:     string
								max_age?:    number
								max_backup?: number
								max_size?:   number
								path?:       string
							}, ...]
						}, ...]
						event_rate_limit?: [{
							configuration?: [_]: string
							enabled?: bool
						}, ...]
						secrets_encryption_config?: [{
							custom_config?: [_]: string
							enabled?: bool
						}, ...]
					}, ...]
					kube_controller?: [{
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
					}, ...]
					kubelet?: [{
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
						generate_serving_certificate?: bool
					}, ...]
					kubeproxy?: [{
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
					}, ...]
					scheduler?: [{
						extra_binds?: [string, ...]
						extra_env?: [string, ...]
					}, ...]
				}, ...]
				upgrade_strategy?: [{
					drain?:                        bool
					max_unavailable_controlplane?: string
					max_unavailable_worker?:       string
					drain_input?: [{
						delete_local_data?:  bool
						force?:              bool
						grace_period?:       number
						ignore_daemon_sets?: bool
						timeout?:            number
					}, ...]
				}, ...]
			}, ...]
			scheduled_cluster_scan?: [{
				enabled?: bool
				scan_config?: [{
					cis_scan_config?: [{
						debug_master?:               bool
						debug_worker?:               bool
						override_benchmark_version?: string
						override_skip?: [string, ...]
						profile?: string
					}, ...]
				}, ...]
				schedule_config?: [{
					cron_schedule: string
				}, ...]
			}, ...]
		}, ...]
		questions?: [{
			default:   string
			variable:  string
			required?: bool
			type?:     string
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2EtcdBackupResource: {
	cluster_id: string
	manual?:    bool
	backup_config?: [{
		enabled?:        bool
		interval_hours?: number
		retention?:      number
		safe_timestamp?: bool
		s3_backup_config?: [{
			bucket_name: string
			endpoint:    string
			access_key?: string
			custom_ca?:  string
			folder?:     string
			region?:     string
			secret_key?: string
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2GlobalRoleBindingResource: {
	global_role_id: string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2MultiClusterAppResource: {
	catalog_name: string
	name:         string
	roles: [string, ...]
	template_name:           string
	revision_history_limit?: number
	wait?:                   bool
	answers?: [{}, ...]
	members?: [{
		access_type?:        string
		group_principal_id?: string
		user_principal_id?:  string
	}, ...]
	targets?: [{
		project_id: string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
	upgrade_strategy?: [{
		rolling_update?: [{
			batch_size?: number
			interval?:   number
		}, ...]
	}, ...]
}
#Rancher2NamespaceResource: {
	name:              string
	project_id:        string
	description?:      string
	wait_for_cluster?: bool
	container_resource_limit?: [{
		limits_cpu?:      string
		limits_memory?:   string
		requests_cpu?:    string
		requests_memory?: string
	}, ...]
	resource_quota?: [{
		limit?: [{
			config_maps?:              string
			limits_cpu?:               string
			limits_memory?:            string
			persistent_volume_claims?: string
			pods?:                     string
			replication_controllers?:  string
			requests_cpu?:             string
			requests_memory?:          string
			requests_storage?:         string
			secrets?:                  string
			services?:                 string
			services_load_balancers?:  string
			services_node_ports?:      string
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2NodeDriverResource: {
	active:       bool
	builtin:      bool
	name:         string
	url:          string
	checksum?:    string
	description?: string
	external_id?: string
	ui_url?:      string
	whitelist_domains?: [string, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2NodePoolResource: {
	cluster_id:                   string
	hostname_prefix:              string
	name:                         string
	node_template_id:             string
	control_plane?:               bool
	delete_not_ready_after_secs?: number
	etcd?:                        bool
	quantity?:                    number
	worker?:                      bool
	node_taints?: [{
		key:     string
		value:   string
		effect?: string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2NodeTemplateResource: {
	name:                        string
	auth_certificate_authority?: string
	auth_key?:                   string
	cloud_credential_id?:        string
	description?:                string
	engine_env?: [_]: string
	engine_insecure_registry?: [string, ...]
	engine_install_url?: string
	engine_label?: [_]: string
	engine_opt?: [_]:   string
	engine_registry_mirror?: [string, ...]
	engine_storage_driver?:   string
	use_internal_ip_address?: bool
	amazonec2_config?: [{
		ami:    string
		region: string
		security_group: [string, ...]
		subnet_id:               string
		vpc_id:                  string
		zone:                    string
		access_key?:             string
		block_duration_minutes?: string
		device_name?:            string
		endpoint?:               string
		iam_instance_profile?:   string
		insecure_transport?:     bool
		instance_type?:          string
		keypair_name?:           string
		monitoring?:             bool
		open_port?: [string, ...]
		private_address_only?:       bool
		request_spot_instance?:      bool
		retries?:                    string
		root_size?:                  string
		secret_key?:                 string
		security_group_readonly?:    bool
		session_token?:              string
		spot_price?:                 string
		ssh_keypath?:                string
		ssh_user?:                   string
		tags?:                       string
		use_ebs_optimized_instance?: bool
		use_private_address?:        bool
		userdata?:                   string
		volume_type?:                string
	}, ...]
	azure_config?: [{
		availability_set?:   string
		client_id?:          string
		client_secret?:      string
		custom_data?:        string
		disk_size?:          string
		dns?:                string
		docker_port?:        string
		environment?:        string
		fault_domain_count?: string
		image?:              string
		location?:           string
		managed_disks?:      bool
		no_public_ip?:       bool
		open_port?: [string, ...]
		private_ip_address?:  string
		resource_group?:      string
		size?:                string
		ssh_user?:            string
		static_public_ip?:    bool
		storage_type?:        string
		subnet?:              string
		subnet_prefix?:       string
		subscription_id?:     string
		update_domain_count?: string
		use_private_ip?:      bool
		vnet?:                string
	}, ...]
	digitalocean_config?: [{
		access_token?:        string
		backups?:             bool
		image?:               string
		ipv6?:                bool
		monitoring?:          bool
		private_networking?:  bool
		region?:              string
		size?:                string
		ssh_key_fingerprint?: string
		ssh_key_path?:        string
		ssh_port?:            string
		ssh_user?:            string
		tags?:                string
		userdata?:            string
	}, ...]
	linode_config?: [{
		authorized_users?:  string
		create_private_ip?: bool
		docker_port?:       string
		image?:             string
		instance_type?:     string
		label?:             string
		region?:            string
		root_pass?:         string
		ssh_port?:          string
		ssh_user?:          string
		stackscript?:       string
		stackscript_data?:  string
		swap_size?:         string
		tags?:              string
		token?:             string
		ua_prefix?:         string
	}, ...]
	opennebula_config?: [{
		password:       string
		user:           string
		xml_rpc_url:    string
		b2d_size?:      string
		cpu?:           string
		dev_prefix?:    string
		disable_vnc?:   bool
		disk_resize?:   string
		image_id?:      string
		image_name?:    string
		image_owner?:   string
		memory?:        string
		network_id?:    string
		network_name?:  string
		network_owner?: string
		ssh_user?:      string
		template_id?:   string
		template_name?: string
		vcpu?:          string
	}, ...]
	openstack_config?: [{
		auth_url:          string
		availability_zone: string
		region:            string
		username:          string
		active_timeout?:   string
		cacert?:           string
		config_drive?:     bool
		domain_id?:        string
		domain_name?:      string
		endpoint_type?:    string
		flavor_id?:        string
		flavor_name?:      string
		floating_ip_pool?: string
		image_id?:         string
		image_name?:       string
		insecure?:         bool
		ip_version?:       string
		keypair_name?:     string
		net_id?:           string
		net_name?:         string
		nova_network?:     bool
		password?:         string
		private_key_file?: string
		sec_groups?:       string
		ssh_port?:         string
		ssh_user?:         string
		tenant_id?:        string
		tenant_name?:      string
		user_data_file?:   string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
	vsphere_config?: [{
		boot2docker_url?: string
		cfgparam?: [string, ...]
		clone_from?:      string
		cloud_config?:    string
		cloudinit?:       string
		content_library?: string
		cpu_count?:       string
		creation_type?:   string
		custom_attributes?: [string, ...]
		datacenter?:        string
		datastore?:         string
		datastore_cluster?: string
		disk_size?:         string
		folder?:            string
		hostsystem?:        string
		memory_size?:       string
		network?: [string, ...]
		password?:       string
		pool?:           string
		ssh_password?:   string
		ssh_port?:       string
		ssh_user?:       string
		ssh_user_group?: string
		tags?: [string, ...]
		username?:                  string
		vapp_ip_allocation_policy?: string
		vapp_ip_protocol?:          string
		vapp_property?: [string, ...]
		vapp_transport?: string
		vcenter?:        string
		vcenter_port?:   string
	}, ...]
}
#Rancher2NotifierResource: {
	cluster_id:     string
	name:           string
	description?:   string
	send_resolved?: bool
	pagerduty_config?: [{
		service_key: string
		proxy_url?:  string
	}, ...]
	slack_config?: [{
		default_recipient: string
		url:               string
		proxy_url?:        string
	}, ...]
	smtp_config?: [{
		default_recipient: string
		host:              string
		port:              number
		sender:            string
		password?:         string
		tls?:              bool
		username?:         string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
	webhook_config?: [{
		url:        string
		proxy_url?: string
	}, ...]
	wechat_config?: [{
		agent:             string
		corp:              string
		default_recipient: string
		secret:            string
		proxy_url?:        string
		recipient_type?:   string
	}, ...]
}
#Rancher2PodSecurityPolicyTemplateResource: {
	name: string
	allowed_capabilities?: [string, ...]
	allowed_proc_mount_types?: [string, ...]
	allowed_unsafe_sysctls?: [string, ...]
	default_add_capabilities?: [string, ...]
	default_allow_privilege_escalation?: bool
	forbidden_sysctls?: [string, ...]
	required_drop_capabilities?: [string, ...]
	allowed_csi_driver?: [{
		name: string
	}, ...]
	allowed_flex_volume?: [{
		driver: string
	}, ...]
	allowed_host_path?: [{
		path_prefix: string
		read_only?:  bool
	}, ...]
	fs_group?: [{
		rule?: string
		range?: [{
			max: number
			min: number
		}, ...]
	}, ...]
	host_port?: [{
		max: number
		min: number
	}, ...]
	run_as_group?: [{
		rule: string
		range?: [{
			max: number
			min: number
		}, ...]
	}, ...]
	run_as_user?: [{
		rule: string
		range?: [{
			max: number
			min: number
		}, ...]
	}, ...]
	runtime_class?: [{
		allowed_runtime_class_names: [string, ...]
		default_runtime_class_name?: string
	}, ...]
	se_linux?: [{
		rule: string
		se_linux_option?: [{
			level?: string
			role?:  string
			type?:  string
			user?:  string
		}, ...]
	}, ...]
	supplemental_group?: [{
		rule?: string
		range?: [{
			max: number
			min: number
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ProjectResource: {
	cluster_id:                       string
	name:                             string
	description?:                     string
	enable_project_monitoring?:       bool
	pod_security_policy_template_id?: string
	wait_for_cluster?:                bool
	container_resource_limit?: [{
		limits_cpu?:      string
		limits_memory?:   string
		requests_cpu?:    string
		requests_memory?: string
	}, ...]
	project_monitoring_input?: [{
		answers?: [_]: string
		version?: string
	}, ...]
	resource_quota?: [{
		namespace_default_limit?: [{
			config_maps?:              string
			limits_cpu?:               string
			limits_memory?:            string
			persistent_volume_claims?: string
			pods?:                     string
			replication_controllers?:  string
			requests_cpu?:             string
			requests_memory?:          string
			requests_storage?:         string
			secrets?:                  string
			services?:                 string
			services_load_balancers?:  string
			services_node_ports?:      string
		}, ...]
		project_limit?: [{
			config_maps?:              string
			limits_cpu?:               string
			limits_memory?:            string
			persistent_volume_claims?: string
			pods?:                     string
			replication_controllers?:  string
			requests_cpu?:             string
			requests_memory?:          string
			requests_storage?:         string
			secrets?:                  string
			services?:                 string
			services_load_balancers?:  string
			services_node_ports?:      string
		}, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ProjectAlertGroupResource: {
	name:                     string
	project_id:               string
	description?:             string
	group_interval_seconds?:  number
	group_wait_seconds?:      number
	repeat_interval_seconds?: number
	recipients?: [{
		notifier_id:        string
		default_recipient?: bool
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ProjectAlertRuleResource: {
	group_id:                 string
	name:                     string
	project_id:               string
	group_interval_seconds?:  number
	group_wait_seconds?:      number
	inherited?:               bool
	repeat_interval_seconds?: number
	severity?:                string
	metric_rule?: [{
		duration:        string
		expression:      string
		threshold_value: number
		comparison?:     string
		description?:    string
	}, ...]
	pod_rule?: [{
		pod_id:                    string
		condition?:                string
		restart_interval_seconds?: number
		restart_times?:            number
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
	workload_rule?: [{
		available_percentage?: number
		selector?: [_]: string
		workload_id?: string
	}, ...]
}
#Rancher2ProjectLoggingResource: {
	kind:                   string
	name:                   string
	project_id:             string
	enable_json_parsing?:   bool
	namespace_id?:          string
	output_flush_interval?: number
	custom_target_config?: [{
		content:      string
		certificate?: string
		client_cert?: string
		client_key?:  string
	}, ...]
	elasticsearch_config?: [{
		endpoint:         string
		auth_password?:   string
		auth_username?:   string
		certificate?:     string
		client_cert?:     string
		client_key?:      string
		client_key_pass?: string
		date_format?:     string
		index_prefix?:    string
		ssl_version?:     string
	}, ...]
	fluentd_config?: [{
		certificate?: string
		compress?:    bool
		enable_tls?:  bool
		fluent_servers?: [{
			endpoint:    string
			hostname?:   string
			password?:   string
			shared_key?: string
			standby?:    bool
			username?:   string
			weight?:     number
		}, ...]
	}, ...]
	kafka_config?: [{
		topic: string
		broker_endpoints?: [string, ...]
		certificate?:        string
		client_cert?:        string
		client_key?:         string
		zookeeper_endpoint?: string
	}, ...]
	splunk_config?: [{
		endpoint:         string
		token:            string
		certificate?:     string
		client_cert?:     string
		client_key?:      string
		client_key_pass?: string
		index?:           string
		source?:          string
	}, ...]
	syslog_config?: [{
		endpoint:     string
		certificate?: string
		client_cert?: string
		client_key?:  string
		program?:     string
		protocol?:    string
		severity?:    string
		token?:       string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2ProjectRoleTemplateBindingResource: {
	name:             string
	project_id:       string
	role_template_id: string
	group_id?:        string
	user_id?:         string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2RegistryResource: {
	name:          string
	project_id:    string
	description?:  string
	namespace_id?: string
	registries?: [{
		address:   string
		password?: string
		username?: string
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2RoleTemplateResource: {
	name:            string
	administrative?: bool
	context?:        string
	default_role?:   bool
	external?:       bool
	hidden?:         bool
	locked?:         bool
	rules?: [{
		api_groups?: [string, ...]
		non_resource_urls?: [string, ...]
		resource_names?: [string, ...]
		resources?: [string, ...]
		verbs?: [string, ...]
	}, ...]
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2SecretResource: {
	data: [_]: string
	project_id:    string
	description?:  string
	name?:         string
	namespace_id?: string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2SettingResource: {
	name:  string
	value: string
}
#Rancher2TokenResource: {
	cluster_id?:  string
	description?: string
	renew?:       bool
	ttl?:         number
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Rancher2UserResource: {
	password: string
	username: string
	enabled?: bool
	name?:    string
	timeouts?: {
		create?: string
		delete?: string
		update?: string
	}
}
#Resources: {
	rancher2_app?: [_]:                           #Rancher2AppResource
	rancher2_auth_config_activedirectory?: [_]:   #Rancher2AuthConfigActivedirectoryResource
	rancher2_auth_config_adfs?: [_]:              #Rancher2AuthConfigAdfsResource
	rancher2_auth_config_azuread?: [_]:           #Rancher2AuthConfigAzureadResource
	rancher2_auth_config_freeipa?: [_]:           #Rancher2AuthConfigFreeipaResource
	rancher2_auth_config_github?: [_]:            #Rancher2AuthConfigGithubResource
	rancher2_auth_config_keycloak?: [_]:          #Rancher2AuthConfigKeycloakResource
	rancher2_auth_config_okta?: [_]:              #Rancher2AuthConfigOktaResource
	rancher2_auth_config_openldap?: [_]:          #Rancher2AuthConfigOpenldapResource
	rancher2_auth_config_ping?: [_]:              #Rancher2AuthConfigPingResource
	rancher2_bootstrap?: [_]:                     #Rancher2BootstrapResource
	rancher2_catalog?: [_]:                       #Rancher2CatalogResource
	rancher2_certificate?: [_]:                   #Rancher2CertificateResource
	rancher2_cloud_credential?: [_]:              #Rancher2CloudCredentialResource
	rancher2_cluster?: [_]:                       #Rancher2ClusterResource
	rancher2_cluster_alert_group?: [_]:           #Rancher2ClusterAlertGroupResource
	rancher2_cluster_alert_rule?: [_]:            #Rancher2ClusterAlertRuleResource
	rancher2_cluster_driver?: [_]:                #Rancher2ClusterDriverResource
	rancher2_cluster_logging?: [_]:               #Rancher2ClusterLoggingResource
	rancher2_cluster_role_template_binding?: [_]: #Rancher2ClusterRoleTemplateBindingResource
	rancher2_cluster_sync?: [_]:                  #Rancher2ClusterSyncResource
	rancher2_cluster_template?: [_]:              #Rancher2ClusterTemplateResource
	rancher2_etcd_backup?: [_]:                   #Rancher2EtcdBackupResource
	rancher2_global_role_binding?: [_]:           #Rancher2GlobalRoleBindingResource
	rancher2_multi_cluster_app?: [_]:             #Rancher2MultiClusterAppResource
	rancher2_namespace?: [_]:                     #Rancher2NamespaceResource
	rancher2_node_driver?: [_]:                   #Rancher2NodeDriverResource
	rancher2_node_pool?: [_]:                     #Rancher2NodePoolResource
	rancher2_node_template?: [_]:                 #Rancher2NodeTemplateResource
	rancher2_notifier?: [_]:                      #Rancher2NotifierResource
	rancher2_pod_security_policy_template?: [_]:  #Rancher2PodSecurityPolicyTemplateResource
	rancher2_project?: [_]:                       #Rancher2ProjectResource
	rancher2_project_alert_group?: [_]:           #Rancher2ProjectAlertGroupResource
	rancher2_project_alert_rule?: [_]:            #Rancher2ProjectAlertRuleResource
	rancher2_project_logging?: [_]:               #Rancher2ProjectLoggingResource
	rancher2_project_role_template_binding?: [_]: #Rancher2ProjectRoleTemplateBindingResource
	rancher2_registry?: [_]:                      #Rancher2RegistryResource
	rancher2_role_template?: [_]:                 #Rancher2RoleTemplateResource
	rancher2_secret?: [_]:                        #Rancher2SecretResource
	rancher2_setting?: [_]:                       #Rancher2SettingResource
	rancher2_token?: [_]:                         #Rancher2TokenResource
	rancher2_user?: [_]:                          #Rancher2UserResource
}
