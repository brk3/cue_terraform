// Generated by cue-terraform-gen (https://github.com/tnarg/cue_terraform_gen). DO NOT EDIT.
package yandex

#YandexClientConfigDataSource: {
	cloud_id?:  string
	folder_id?: string
	iam_token?: string
	id?:        string
	zone?:      string
}
#YandexComputeDiskDataSource: {
	created_at?:  string
	description?: string
	disk_id?:     string
	folder_id?:   string
	id?:          string
	image_id?:    string
	instance_ids?: [string, ...]
	labels?: [_]: string
	name?: string
	product_ids?: [string, ...]
	size?:        number
	snapshot_id?: string
	status?:      string
	type?:        string
	zone?:        string
}
#YandexComputeImageDataSource: {
	created_at?:  string
	description?: string
	family?:      string
	folder_id?:   string
	id?:          string
	image_id?:    string
	labels?: [_]: string
	min_disk_size?: number
	name?:          string
	os_type?:       string
	product_ids?: [string, ...]
	size?:   number
	status?: string
}
#YandexComputeInstanceDataSource: {
	boot_disk?: [{
		auto_delete: bool
		device_name: string
		disk_id:     string
		initialize_params: [{
			description: string
			image_id:    string
			name:        string
			size:        number
			snapshot_id: string
			type:        string
		}, ...]
		mode: string
	}, ...]
	created_at?:  string
	description?: string
	folder_id?:   string
	fqdn?:        string
	id?:          string
	instance_id?: string
	labels?: [_]:   string
	metadata?: [_]: string
	name?:                      string
	network_acceleration_type?: string
	network_interface?: [{
		index:          number
		ip_address:     string
		ipv4:           bool
		ipv6:           bool
		ipv6_address:   string
		mac_address:    string
		nat:            bool
		nat_ip_address: string
		nat_ip_version: string
		security_group_ids: [string, ...]
		subnet_id: string
	}, ...]
	platform_id?: string
	resources?: [{
		core_fraction: number
		cores:         number
		gpus:          number
		memory:        number
	}, ...]
	secondary_disk?: [{
		auto_delete: bool
		device_name: string
		disk_id:     string
		mode:        string
	}, ...]
	service_account_id?: string
	status?:             string
	zone?:               string
	placement_policy?: [{
		placement_group_id: string
	}, ...]
	scheduling_policy?: [{
		preemptible?: bool
	}, ...]
}
#YandexComputeInstanceGroupDataSource: {
	instance_group_id: string
	allocation_policy?: [{
		zones: [string, ...]
	}, ...]
	created_at?:          string
	deletion_protection?: bool
	deploy_policy?: [{
		max_creating:     number
		max_deleting:     number
		max_expansion:    number
		max_unavailable:  number
		startup_duration: number
		strategy:         string
	}, ...]
	description?: string
	folder_id?:   string
	health_check?: [{
		healthy_threshold: number
		http_options: [{
			path: string
			port: number
		}, ...]
		interval: number
		tcp_options: [{
			port: number
		}, ...]
		timeout:             number
		unhealthy_threshold: number
	}, ...]
	id?: string
	instance_template?: [{
		boot_disk: [{
			device_name: string
			initialize_params: [{
				description: string
				image_id:    string
				size:        number
				snapshot_id: string
				type:        string
			}, ...]
			mode: string
		}, ...]
		description: string
		hostname:    string
		labels: [_]:   string
		metadata: [_]: string
		name: string
		network_interface: [{
			ipv4:       bool
			ipv6:       bool
			nat:        bool
			network_id: string
			security_group_ids: [string, ...]
			subnet_ids: [string, ...]
		}, ...]
		network_settings: [{
			type: string
		}, ...]
		placement_policy: [{
			placement_group_id: string
		}, ...]
		platform_id: string
		resources: [{
			core_fraction: number
			cores:         number
			gpus:          number
			memory:        number
		}, ...]
		scheduling_policy: [{
			preemptible: bool
		}, ...]
		secondary_disk: [{
			device_name: string
			initialize_params: [{
				description: string
				image_id:    string
				size:        number
				snapshot_id: string
				type:        string
			}, ...]
			mode: string
		}, ...]
		service_account_id: string
	}, ...]
	instances?: [{
		fqdn:        string
		instance_id: string
		name:        string
		network_interface: [{
			index:          number
			ip_address:     string
			ipv4:           bool
			ipv6:           bool
			ipv6_address:   string
			mac_address:    string
			nat:            bool
			nat_ip_address: string
			nat_ip_version: string
			subnet_id:      string
		}, ...]
		status:            string
		status_changed_at: string
		status_message:    string
		zone_id:           string
	}, ...]
	labels?: [_]: string
	load_balancer?: [{
		status_message:           string
		target_group_description: string
		target_group_id:          string
		target_group_labels: [_]: string
		target_group_name: string
	}, ...]
	load_balancer_state?: [{
		status_message:  string
		target_group_id: string
	}, ...]
	name?: string
	scale_policy?: [{
		auto_scale: [{
			cpu_utilization_target: number
			custom_rule: [{
				labels: [_]: string
				metric_name: string
				metric_type: string
				rule_type:   string
				target:      number
			}, ...]
			initial_size:           number
			max_size:               number
			measurement_duration:   number
			min_zone_size:          number
			stabilization_duration: number
			warmup_duration:        number
		}, ...]
		fixed_scale: [{
			size: number
		}, ...]
		test_auto_scale: [{
			cpu_utilization_target: number
			custom_rule: [{
				labels: [_]: string
				metric_name: string
				metric_type: string
				rule_type:   string
				target:      number
			}, ...]
			initial_size:           number
			max_size:               number
			measurement_duration:   number
			min_zone_size:          number
			stabilization_duration: number
			warmup_duration:        number
		}, ...]
	}, ...]
	service_account_id?: string
	status?:             string
	variables?: [_]: string
}
#YandexComputePlacementGroupDataSource: {
	created_at?:  string
	description?: string
	folder_id?:   string
	group_id?:    string
	id?:          string
	labels?: [_]: string
	name?: string
}
#YandexComputeSnapshotDataSource: {
	created_at?:  string
	description?: string
	disk_size?:   number
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?: string
	product_ids?: [string, ...]
	snapshot_id?:    string
	source_disk_id?: string
	status?:         string
	storage_size?:   number
}
#YandexContainerRegistryDataSource: {
	created_at?: string
	folder_id?:  string
	id?:         string
	labels?: [_]: string
	name?:        string
	registry_id?: string
	status?:      string
}
#YandexDataprocClusterDataSource: {
	bucket?: string
	cluster_config?: [{
		hadoop: [{
			properties: [_]: string
			services: [string, ...]
			ssh_public_keys: [string, ...]
		}, ...]
		subcluster_spec: [{
			hosts_count: number
			id:          string
			name:        string
			resources: [{
				disk_size:          number
				disk_type_id:       string
				resource_preset_id: string
			}, ...]
			role:      string
			subnet_id: string
		}, ...]
		version_id: string
	}, ...]
	cluster_id?:  string
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?:               string
	service_account_id?: string
	ui_proxy?:           bool
	zone_id?:            string
}
#YandexFunctionDataSource: {
	created_at?:  string
	description?: string
	entrypoint?:  string
	environment?: [_]: string
	execution_timeout?: string
	folder_id?:         string
	function_id?:       string
	id?:                string
	image_size?:        number
	labels?: [_]: string
	loggroup_id?:        string
	memory?:             number
	name?:               string
	runtime?:            string
	service_account_id?: string
	tags?: [string, ...]
	version?: string
}
#YandexFunctionTriggerDataSource: {
	created_at?:  string
	description?: string
	dlq?: [{
		queue_id:           string
		service_account_id: string
	}, ...]
	folder_id?: string
	function?: [{
		id:                 string
		retry_attempts:     string
		retry_interval:     string
		service_account_id: string
		tag:                string
	}, ...]
	id?: string
	iot?: [{
		device_id:   string
		registry_id: string
		topic:       string
	}, ...]
	labels?: [_]: string
	message_queue?: [{
		batch_cutoff:       string
		batch_size:         string
		queue_id:           string
		service_account_id: string
		visibility_timeout: string
	}, ...]
	name?: string
	object_storage?: [{
		bucket_id: string
		create:    bool
		delete:    bool
		prefix:    string
		suffix:    string
		update:    bool
	}, ...]
	timer?: [{
		cron_expression: string
	}, ...]
	trigger_id?: string
}
#YandexIamPolicyDataSource: {
	id?:          string
	policy_data?: string
	binding?: [{
		members: [string, ...]
		role: string
	}, ...]
}
#YandexIamRoleDataSource: {
	description?: string
	id?:          string
	role_id?:     string
}
#YandexIamServiceAccountDataSource: {
	created_at?:         string
	description?:        string
	folder_id?:          string
	id?:                 string
	name?:               string
	service_account_id?: string
}
#YandexIamUserDataSource: {
	default_email?: string
	id?:            string
	login?:         string
	user_id?:       string
}
#YandexIotCoreDeviceDataSource: {
	aliases?: [_]: string
	certificates?: [string, ...]
	created_at?:  string
	description?: string
	device_id?:   string
	id?:          string
	name?:        string
	passwords?: [string, ...]
	registry_id?: string
}
#YandexIotCoreRegistryDataSource: {
	certificates?: [string, ...]
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?: string
	passwords?: [string, ...]
	registry_id?: string
}
#YandexKubernetesClusterDataSource: {
	cluster_id?:         string
	cluster_ipv4_range?: string
	created_at?:         string
	description?:        string
	folder_id?:          string
	health?:             string
	id?:                 string
	kms_provider?: [{
		key_id: string
	}, ...]
	labels?: [_]: string
	master?: [{
		cluster_ca_certificate: string
		external_v4_address:    string
		external_v4_endpoint:   string
		internal_v4_address:    string
		internal_v4_endpoint:   string
		maintenance_policy: [{
			auto_upgrade: bool
			maintenance_window: [{
				day:        string
				duration:   string
				start_time: string
			}, ...]
		}, ...]
		public_ip: bool
		regional: [{
			region: string
		}, ...]
		security_group_ids: [string, ...]
		version: string
		version_info: [{
			current_version:        string
			new_revision_available: bool
			new_revision_summary:   string
			version_deprecated:     bool
		}, ...]
		zonal: [{
			zone: string
		}, ...]
	}, ...]
	name?:                     string
	network_id?:               string
	network_policy_provider?:  string
	node_ipv4_cidr_mask_size?: number
	node_service_account_id?:  string
	release_channel?:          string
	service_account_id?:       string
	service_ipv4_range?:       string
	status?:                   string
}
#YandexKubernetesNodeGroupDataSource: {
	allocation_policy?: [{
		location: [{
			subnet_id: string
			zone:      string
		}, ...]
	}, ...]
	allowed_unsafe_sysctls?: [string, ...]
	cluster_id?: string
	created_at?: string
	deploy_policy?: [{
		max_expansion:   number
		max_unavailable: number
	}, ...]
	description?:       string
	folder_id?:         string
	id?:                string
	instance_group_id?: string
	instance_template?: [{
		boot_disk: [{
			size: number
			type: string
		}, ...]
		metadata: [_]: string
		nat:         bool
		platform_id: string
		resources: [{
			core_fraction: number
			cores:         number
			gpus:          number
			memory:        number
		}, ...]
		scheduling_policy: [{
			preemptible: bool
		}, ...]
	}, ...]
	labels?: [_]: string
	maintenance_policy?: [{
		auto_repair:  bool
		auto_upgrade: bool
		maintenance_window: [{
			day:        string
			duration:   string
			start_time: string
		}, ...]
	}, ...]
	name?:          string
	node_group_id?: string
	node_labels?: [_]: string
	node_taints?: [string, ...]
	scale_policy?: [{
		auto_scale: [{
			initial: number
			max:     number
			min:     number
		}, ...]
		fixed_scale: [{
			size: number
		}, ...]
	}, ...]
	status?: string
	version_info?: [{
		current_version:        string
		new_revision_available: bool
		new_revision_summary:   string
		version_deprecated:     bool
	}, ...]
}
#YandexLbNetworkLoadBalancerDataSource: {
	attached_target_group?: [{
		healthcheck: [{
			healthy_threshold: number
			http_options: [{
				path: string
				port: number
			}, ...]
			interval: number
			name:     string
			tcp_options: [{
				port: number
			}, ...]
			timeout:             number
			unhealthy_threshold: number
		}, ...]
		target_group_id: string
	}, ...]
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	listener?: [{
		external_address_spec: [{
			address:    string
			ip_version: string
		}, ...]
		internal_address_spec: [{
			address:    string
			ip_version: string
			subnet_id:  string
		}, ...]
		name:        string
		port:        number
		protocol:    string
		target_port: number
	}, ...]
	name?:                     string
	network_load_balancer_id?: string
	region_id?:                string
	type?:                     string
}
#YandexLbTargetGroupDataSource: {
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?: string
	target?: [{
		address:   string
		subnet_id: string
	}, ...]
	target_group_id?: string
}
#YandexMdbClickhouseClusterDataSource: {
	access?: [{
		data_lens:  bool
		metrika:    bool
		serverless: bool
		web_sql:    bool
	}, ...]
	backup_window_start?: [{
		hours:   number
		minutes: number
	}, ...]
	clickhouse?: [{
		config: [{
			background_pool_size:          number
			background_schedule_pool_size: number
			compression: [{
				method:              string
				min_part_size:       number
				min_part_size_ratio: number
			}, ...]
			geobase_uri: string
			graphite_rollup: [{
				name: string
				pattern: [{
					function: string
					regexp:   string
					retention: [{
						age:       number
						precision: number
					}, ...]
				}, ...]
			}, ...]
			kafka: [{
				sasl_mechanism:    string
				sasl_password:     string
				sasl_username:     string
				security_protocol: string
			}, ...]
			kafka_topic: [{
				name: string
				settings: [{
					sasl_mechanism:    string
					sasl_password:     string
					sasl_username:     string
					security_protocol: string
				}, ...]
			}, ...]
			keep_alive_timeout:         number
			log_level:                  string
			mark_cache_size:            number
			max_concurrent_queries:     number
			max_connections:            number
			max_partition_size_to_drop: number
			max_table_size_to_drop:     number
			merge_tree: [{
				max_bytes_to_merge_at_min_space_in_pool:                   number
				max_replicated_merges_in_queue:                            number
				number_of_free_entries_in_pool_to_lower_max_size_of_merge: number
				parts_to_delay_insert:                                     number
				parts_to_throw_insert:                                     number
				replicated_deduplication_window:                           number
				replicated_deduplication_window_seconds:                   number
			}, ...]
			metric_log_enabled:              bool
			metric_log_retention_size:       number
			metric_log_retention_time:       number
			part_log_retention_size:         number
			part_log_retention_time:         number
			query_log_retention_size:        number
			query_log_retention_time:        number
			query_thread_log_enabled:        bool
			query_thread_log_retention_size: number
			query_thread_log_retention_time: number
			rabbitmq: [{
				password: string
				username: string
			}, ...]
			text_log_enabled:         bool
			text_log_level:           string
			text_log_retention_size:  number
			text_log_retention_time:  number
			timezone:                 string
			trace_log_enabled:        bool
			trace_log_retention_size: number
			trace_log_retention_time: number
			uncompressed_cache_size:  number
		}, ...]
		resources: [{
			disk_size:          number
			disk_type_id:       string
			resource_preset_id: string
		}, ...]
	}, ...]
	cluster_id?: string
	created_at?: string
	database?: [{
		name: string
	}, ...]
	description?: string
	environment?: string
	folder_id?:   string
	format_schema?: [{
		name: string
		type: string
		uri:  string
	}, ...]
	health?: string
	host?: [{
		assign_public_ip: bool
		fqdn:             string
		shard_name:       string
		subnet_id:        string
		type:             string
		zone:             string
	}, ...]
	id?: string
	labels?: [_]: string
	ml_model?: [{
		name: string
		type: string
		uri:  string
	}, ...]
	name?:       string
	network_id?: string
	security_group_ids?: [string, ...]
	shard_group?: [{
		description: string
		name:        string
		shard_names: [string, ...]
	}, ...]
	sql_database_management?: bool
	sql_user_management?:     bool
	status?:                  string
	user?: [{
		name: string
		permission: [{
			database_name: string
		}, ...]
	}, ...]
	version?: string
	zookeeper?: [{
		resources: [{
			disk_size:          number
			disk_type_id:       string
			resource_preset_id: string
		}, ...]
	}, ...]
}
#YandexMdbKafkaClusterDataSource: {
	cluster_id?:  string
	created_at?:  string
	description?: string
	environment?: string
	folder_id?:   string
	health?:      string
	id?:          string
	labels?: [_]: string
	name?:       string
	network_id?: string
	security_group_ids?: [string, ...]
	status?: string
	subnet_ids?: [string, ...]
	config?: [{
		version: string
		zones: [string, ...]
		assign_public_ip?: bool
		brokers_count?:    number
		kafka?: [{
			kafka_config?: [{
				compression_type?:                string
				log_flush_interval_messages?:     number
				log_flush_interval_ms?:           number
				log_flush_scheduler_interval_ms?: number
				log_preallocate?:                 bool
				log_retention_bytes?:             number
				log_retention_hours?:             number
				log_retention_minutes?:           number
				log_retention_ms?:                number
				log_segment_bytes?:               number
			}, ...]
			resources?: [{
				disk_size:          number
				disk_type_id:       string
				resource_preset_id: string
			}, ...]
		}, ...]
		zookeeper?: [{
			resources?: [{
				disk_size:          number
				disk_type_id:       string
				resource_preset_id: string
			}, ...]
		}, ...]
	}, ...]
	topic?: [{
		name:               string
		partitions:         number
		replication_factor: number
		topic_config?: [{
			cleanup_policy?:        string
			compression_type?:      string
			delete_retention_ms?:   number
			file_delete_delay_ms?:  number
			flush_messages?:        number
			flush_ms?:              number
			max_message_bytes?:     number
			min_compaction_lag_ms?: number
			min_insync_replicas?:   number
			preallocate?:           bool
			retention_bytes?:       number
			retention_ms?:          number
			segment_bytes?:         number
		}, ...]
	}, ...]
	user?: [{
		name:     string
		password: string
		permission?: [{
			role:       string
			topic_name: string
		}, ...]
	}, ...]
}
#YandexMdbMongodbClusterDataSource: {
	cluster_config?: [{
		access: [{
			data_lens: bool
		}, ...]
		backup_window_start: [{
			hours:   number
			minutes: number
		}, ...]
		feature_compatibility_version: string
		version:                       string
	}, ...]
	cluster_id?: string
	created_at?: string
	database?: [{
		name: string
	}, ...]
	description?: string
	environment?: string
	folder_id?:   string
	health?:      string
	host?: [{
		assign_public_ip: bool
		health:           string
		name:             string
		role:             string
		shard_name:       string
		subnet_id:        string
		type:             string
		zone_id:          string
	}, ...]
	id?: string
	labels?: [_]: string
	name?:       string
	network_id?: string
	resources?: [{
		disk_size:          number
		disk_type_id:       string
		resource_preset_id: string
	}, ...]
	security_group_ids?: [string, ...]
	sharded?: bool
	status?:  string
	user?: [{
		name: string
		permission: [{
			database_name: string
			roles: [string, ...]
		}, ...]
	}, ...]
}
#YandexMdbMysqlClusterDataSource: {
	backup_window_start?: [{
		hours:   number
		minutes: number
	}, ...]
	cluster_id?: string
	created_at?: string
	database?: [{
		name: string
	}, ...]
	description?: string
	environment?: string
	folder_id?:   string
	health?:      string
	host?: [{
		assign_public_ip: bool
		fqdn:             string
		subnet_id:        string
		zone:             string
	}, ...]
	id?: string
	labels?: [_]:       string
	mysql_config?: [_]: string
	name?:       string
	network_id?: string
	resources?: [{
		disk_size:          number
		disk_type_id:       string
		resource_preset_id: string
	}, ...]
	security_group_ids?: [string, ...]
	status?: string
	user?: [{
		name:     string
		password: string
		permission: [{
			database_name: string
			roles: [string, ...]
		}, ...]
	}, ...]
	version?: string
	access?: [{
		data_lens?: bool
		web_sql?:   bool
	}, ...]
}
#YandexMdbPostgresqlClusterDataSource: {
	cluster_id?: string
	config?: [{
		access: [{
			data_lens: bool
			web_sql:   bool
		}, ...]
		autofailover: bool
		backup_window_start: [{
			hours:   number
			minutes: number
		}, ...]
		performance_diagnostics: [{
			enabled:                      bool
			sessions_sampling_interval:   number
			statements_sampling_interval: number
		}, ...]
		pooler_config: [{
			pool_discard: bool
			pooling_mode: string
		}, ...]
		postgresql_config: [_]: string
		resources: [{
			disk_size:          number
			disk_type_id:       string
			resource_preset_id: string
		}, ...]
		version: string
	}, ...]
	created_at?: string
	database?: [{
		extension: [{
			name:    string
			version: string
		}, ...]
		lc_collate: string
		lc_type:    string
		name:       string
		owner:      string
	}, ...]
	description?: string
	environment?: string
	folder_id?:   string
	health?:      string
	host?: [{
		assign_public_ip:   bool
		fqdn:               string
		priority:           number
		replication_source: string
		role:               string
		subnet_id:          string
		zone:               string
	}, ...]
	id?: string
	labels?: [_]: string
	name?:       string
	network_id?: string
	security_group_ids?: [string, ...]
	status?: string
	user?: [{
		conn_limit: number
		grants: [string, ...]
		login:    bool
		name:     string
		password: string
		permission: [{
			database_name: string
		}, ...]
		settings: [_]: string
	}, ...]
}
#YandexMdbRedisClusterDataSource: {
	cluster_id?: string
	config?: [{
		maxmemory_policy: string
		timeout:          number
		version:          string
	}, ...]
	created_at?:  string
	description?: string
	environment?: string
	folder_id?:   string
	health?:      string
	host?: [{
		fqdn:       string
		shard_name: string
		subnet_id:  string
		zone:       string
	}, ...]
	id?: string
	labels?: [_]: string
	name?:       string
	network_id?: string
	resources?: [{
		disk_size:          number
		resource_preset_id: string
	}, ...]
	security_group_ids?: [string, ...]
	sharded?: bool
	status?:  string
}
#YandexMessageQueueDataSource: {
	name:        string
	access_key?: string
	arn?:        string
	id?:         string
	secret_key?: string
	url?:        string
}
#YandexResourcemanagerCloudDataSource: {
	cloud_id?:    string
	created_at?:  string
	description?: string
	id?:          string
	name?:        string
}
#YandexResourcemanagerFolderDataSource: {
	cloud_id?:    string
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?:   string
	status?: string
}
#YandexVpcAddressDataSource: {
	address_id?:  string
	created_at?:  string
	description?: string
	external_ipv4_address?: [{
		address:                  string
		ddos_protection_provider: string
		outgoing_smtp_capability: string
		zone_id:                  string
	}, ...]
	folder_id?: string
	id?:        string
	labels?: [_]: string
	name?:     string
	reserved?: bool
	used?:     bool
}
#YandexVpcNetworkDataSource: {
	created_at?:                string
	default_security_group_id?: string
	description?:               string
	folder_id?:                 string
	id?:                        string
	labels?: [_]: string
	name?:       string
	network_id?: string
	subnet_ids?: [string, ...]
}
#YandexVpcRouteTableDataSource: {
	created_at?:  string
	description?: string
	folder_id?:   string
	id?:          string
	labels?: [_]: string
	name?:           string
	network_id?:     string
	route_table_id?: string
	static_route?: [{
		destination_prefix: string
		next_hop_address:   string
	}, ...]
}
#YandexVpcSecurityGroupDataSource: {
	created_at?:  string
	description?: string
	egress?: [{
		description: string
		from_port:   number
		id:          string
		labels: [_]: string
		port:              number
		predefined_target: string
		protocol:          string
		security_group_id: string
		to_port:           number
		v4_cidr_blocks: [string, ...]
		v6_cidr_blocks: [string, ...]
	}, ...]
	folder_id?: string
	id?:        string
	ingress?: [{
		description: string
		from_port:   number
		id:          string
		labels: [_]: string
		port:              number
		predefined_target: string
		protocol:          string
		security_group_id: string
		to_port:           number
		v4_cidr_blocks: [string, ...]
		v6_cidr_blocks: [string, ...]
	}, ...]
	labels?: [_]: string
	name?:              string
	network_id?:        string
	security_group_id?: string
	status?:            string
}
#YandexVpcSubnetDataSource: {
	created_at?:  string
	description?: string
	dhcp_options?: [{
		domain_name: string
		domain_name_servers: [string, ...]
		ntp_servers: [string, ...]
	}, ...]
	folder_id?: string
	id?:        string
	labels?: [_]: string
	name?:           string
	network_id?:     string
	route_table_id?: string
	subnet_id?:      string
	v4_cidr_blocks?: [string, ...]
	v6_cidr_blocks?: [string, ...]
	zone?: string
}
#DataSources: {
	yandex_client_config?: [_]:            #YandexClientConfigDataSource
	yandex_compute_disk?: [_]:             #YandexComputeDiskDataSource
	yandex_compute_image?: [_]:            #YandexComputeImageDataSource
	yandex_compute_instance?: [_]:         #YandexComputeInstanceDataSource
	yandex_compute_instance_group?: [_]:   #YandexComputeInstanceGroupDataSource
	yandex_compute_placement_group?: [_]:  #YandexComputePlacementGroupDataSource
	yandex_compute_snapshot?: [_]:         #YandexComputeSnapshotDataSource
	yandex_container_registry?: [_]:       #YandexContainerRegistryDataSource
	yandex_dataproc_cluster?: [_]:         #YandexDataprocClusterDataSource
	yandex_function?: [_]:                 #YandexFunctionDataSource
	yandex_function_trigger?: [_]:         #YandexFunctionTriggerDataSource
	yandex_iam_policy?: [_]:               #YandexIamPolicyDataSource
	yandex_iam_role?: [_]:                 #YandexIamRoleDataSource
	yandex_iam_service_account?: [_]:      #YandexIamServiceAccountDataSource
	yandex_iam_user?: [_]:                 #YandexIamUserDataSource
	yandex_iot_core_device?: [_]:          #YandexIotCoreDeviceDataSource
	yandex_iot_core_registry?: [_]:        #YandexIotCoreRegistryDataSource
	yandex_kubernetes_cluster?: [_]:       #YandexKubernetesClusterDataSource
	yandex_kubernetes_node_group?: [_]:    #YandexKubernetesNodeGroupDataSource
	yandex_lb_network_load_balancer?: [_]: #YandexLbNetworkLoadBalancerDataSource
	yandex_lb_target_group?: [_]:          #YandexLbTargetGroupDataSource
	yandex_mdb_clickhouse_cluster?: [_]:   #YandexMdbClickhouseClusterDataSource
	yandex_mdb_kafka_cluster?: [_]:        #YandexMdbKafkaClusterDataSource
	yandex_mdb_mongodb_cluster?: [_]:      #YandexMdbMongodbClusterDataSource
	yandex_mdb_mysql_cluster?: [_]:        #YandexMdbMysqlClusterDataSource
	yandex_mdb_postgresql_cluster?: [_]:   #YandexMdbPostgresqlClusterDataSource
	yandex_mdb_redis_cluster?: [_]:        #YandexMdbRedisClusterDataSource
	yandex_message_queue?: [_]:            #YandexMessageQueueDataSource
	yandex_resourcemanager_cloud?: [_]:    #YandexResourcemanagerCloudDataSource
	yandex_resourcemanager_folder?: [_]:   #YandexResourcemanagerFolderDataSource
	yandex_vpc_address?: [_]:              #YandexVpcAddressDataSource
	yandex_vpc_network?: [_]:              #YandexVpcNetworkDataSource
	yandex_vpc_route_table?: [_]:          #YandexVpcRouteTableDataSource
	yandex_vpc_security_group?: [_]:       #YandexVpcSecurityGroupDataSource
	yandex_vpc_subnet?: [_]:               #YandexVpcSubnetDataSource
}
