// Generated by cue-terraform-gen (https://github.com/tnarg/cue_terraform_gen). DO NOT EDIT.
package avi

#AviActiongroupconfigDataSource: {
	action_script_config_ref?:       string
	autoscale_trigger_notification?: bool
	description?:                    string
	email_config_ref?:               string
	external_only?:                  bool
	id?:                             string
	level?:                          string
	name?:                           string
	snmp_trap_profile_ref?:          string
	syslog_config_ref?:              string
	tenant_ref?:                     string
	uuid?:                           string
}
#AviAlertconfigDataSource: {
	action_group_ref?: string
	alert_rule?: [{
		conn_app_log_rule: [{
			filter_action: string
			filter_string: string
		}, ...]
		event_match_filter: string
		metrics_rule: [{
			duration:  number
			metric_id: string
			metric_threshold: [{
				comparator: string
				threshold:  number
			}, ...]
		}, ...]
		operator: string
		sys_event_rule: [{
			event_details: [{
				comparator:          string
				event_details_key:   string
				event_details_value: string
			}, ...]
			event_id: string
			not_cond: bool
		}, ...]
	}, ...]
	autoscale_alert?: bool
	category?:        string
	description?:     string
	enabled?:         bool
	expiry_time?:     number
	id?:              string
	name?:            string
	obj_uuid?:        string
	object_type?:     string
	recommendation?:  string
	rolling_window?:  number
	source?:          string
	summary?:         string
	tenant_ref?:      string
	threshold?:       number
	throttle?:        number
	uuid?:            string
}
#AviAlertemailconfigDataSource: {
	cc_emails?:   string
	description?: string
	id?:          string
	name?:        string
	tenant_ref?:  string
	to_emails?:   string
	uuid?:        string
}
#AviAlertscriptconfigDataSource: {
	action_script?: string
	id?:            string
	name?:          string
	tenant_ref?:    string
	uuid?:          string
}
#AviAlertsyslogconfigDataSource: {
	description?: string
	id?:          string
	name?:        string
	syslog_servers?: [{
		anon_auth:                   bool
		format:                      string
		pkiprofile_ref:              string
		ssl_key_and_certificate_ref: string
		syslog_server:               string
		syslog_server_port:          number
		tls_enable:                  bool
		udp:                         bool
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviAnalyticsprofileDataSource: {
	apdex_response_threshold?:               number
	apdex_response_tolerated_factor?:        number
	apdex_rtt_threshold?:                    number
	apdex_rtt_tolerated_factor?:             number
	apdex_rum_threshold?:                    number
	apdex_rum_tolerated_factor?:             number
	apdex_server_response_threshold?:        number
	apdex_server_response_tolerated_factor?: number
	apdex_server_rtt_threshold?:             number
	apdex_server_rtt_tolerated_factor?:      number
	client_log_config?: [{
		enable_significant_log_collection: bool
		filtered_log_processing:           string
		non_significant_log_processing:    string
		significant_log_processing:        string
	}, ...]
	client_log_streaming_config?: [{
		external_server:      string
		external_server_port: number
		format_config: [{
			format: string
			included_fields: [string, ...]
		}, ...]
		log_types_to_send:   string
		max_logs_per_second: number
		protocol:            string
		syslog_config: [{
			facility:                     number
			filtered_log_severity:        number
			hostname:                     string
			non_significant_log_severity: number
			significant_log_severity:     number
		}, ...]
	}, ...]
	conn_lossy_ooo_threshold?:                        number
	conn_lossy_timeo_rexmt_threshold?:                number
	conn_lossy_total_rexmt_threshold?:                number
	conn_lossy_zero_win_size_event_threshold?:        number
	conn_server_lossy_ooo_threshold?:                 number
	conn_server_lossy_timeo_rexmt_threshold?:         number
	conn_server_lossy_total_rexmt_threshold?:         number
	conn_server_lossy_zero_win_size_event_threshold?: number
	description?:                                     string
	disable_ondemand_metrics?:                        bool
	disable_se_analytics?:                            bool
	disable_server_analytics?:                        bool
	disable_vs_analytics?:                            bool
	enable_advanced_analytics?:                       bool
	exclude_client_close_before_request_as_error?:    bool
	exclude_dns_policy_drop_as_significant?:          bool
	exclude_gs_down_as_error?:                        bool
	exclude_http_error_codes?: [number, ...]
	exclude_invalid_dns_domain_as_error?: bool
	exclude_invalid_dns_query_as_error?:  bool
	exclude_no_dns_record_as_error?:      bool
	exclude_no_valid_gs_member_as_error?: bool
	exclude_persistence_change_as_error?: bool
	exclude_server_dns_error_as_error?:   bool
	exclude_server_tcp_reset_as_error?:   bool
	exclude_sip_error_codes?: [number, ...]
	exclude_syn_retransmit_as_error?:         bool
	exclude_tcp_reset_as_error?:              bool
	exclude_unsupported_dns_query_as_error?:  bool
	healthscore_max_server_limit?:            number
	hs_event_throttle_window?:                number
	hs_max_anomaly_penalty?:                  number
	hs_max_resources_penalty?:                number
	hs_max_security_penalty?:                 number
	hs_min_dos_rate?:                         number
	hs_performance_boost?:                    number
	hs_pscore_traffic_threshold_l4_client?:   number
	hs_pscore_traffic_threshold_l4_server?:   number
	hs_security_certscore_expired?:           number
	hs_security_certscore_gt30d?:             number
	hs_security_certscore_le07d?:             number
	hs_security_certscore_le30d?:             number
	hs_security_chain_invalidity_penalty?:    number
	hs_security_cipherscore_eq000b?:          number
	hs_security_cipherscore_ge128b?:          number
	hs_security_cipherscore_lt128b?:          number
	hs_security_encalgo_score_none?:          number
	hs_security_encalgo_score_rc4?:           number
	hs_security_hsts_penalty?:                number
	hs_security_nonpfs_penalty?:              number
	hs_security_selfsignedcert_penalty?:      number
	hs_security_ssl30_score?:                 number
	hs_security_tls10_score?:                 number
	hs_security_tls11_score?:                 number
	hs_security_tls12_score?:                 number
	hs_security_weak_signature_algo_penalty?: number
	id?:                                      string
	name?:                                    string
	ondemand_metrics_idle_timeout?:           number
	ranges?: [{
		begin: number
		end:   number
	}, ...]
	resp_code_block?: [string, ...]
	sensitive_log_profile?: [{
		header_field_rules: [{
			action:  string
			enabled: bool
			index:   number
			match: [{
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
			name: string
		}, ...]
		waf_field_rules: [{
			action:  string
			enabled: bool
			index:   number
			match: [{
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
	sip_log_depth?: number
	tenant_ref?:    string
	uuid?:          string
}
#AviApplicationpersistenceprofileDataSource: {
	app_cookie_persistence_profile?: [{
		encryption_key: string
		prst_hdr_name:  string
		timeout:        number
	}, ...]
	description?: string
	hdr_persistence_profile?: [{
		prst_hdr_name: string
	}, ...]
	http_cookie_persistence_profile?: [{
		always_send_cookie: bool
		cookie_name:        string
		encryption_key:     string
		key: [{
			aes_key:  string
			hmac_key: string
			name:     string
		}, ...]
		timeout: number
	}, ...]
	id?: string
	ip_persistence_profile?: [{
		ip_mask:               number
		ip_persistent_timeout: number
	}, ...]
	is_federated?:            bool
	name?:                    string
	persistence_type?:        string
	server_hm_down_recovery?: string
	tenant_ref?:              string
	uuid?:                    string
}
#AviApplicationprofileDataSource: {
	cloud_config_cksum?: string
	created_by?:         string
	description?:        string
	dns_service_profile?: [{
		aaaa_empty_response:  bool
		admin_email:          string
		dns_over_tcp_enabled: bool
		dns_zones: [{
			admin_email: string
			domain_name: string
			name_server: string
		}, ...]
		domain_names: [string, ...]
		ecs_stripping_enabled:         bool
		edns:                          bool
		edns_client_subnet_prefix_len: number
		error_response:                string
		name_server:                   string
		negative_caching_ttl:          number
		num_dns_ip:                    number
		ttl:                           number
	}, ...]
	dos_rl_profile?: [{
		dos_profile: [{
			thresh_info: [{
				attack:    string
				max_value: number
				min_value: number
			}, ...]
			thresh_period: number
		}, ...]
		rl_profile: [{
			client_ip_connections_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			client_ip_failed_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			client_ip_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			client_ip_scanners_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			client_ip_to_uri_failed_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			client_ip_to_uri_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			custom_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			http_header_rate_limits: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			uri_failed_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			uri_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			uri_scanners_requests_rate_limit: [{
				action: [{
					file: [{
						content_type: string
						file_content: string
					}, ...]
					redirect: [{
						host: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						keep_query: bool
						path: [{
							tokens: [{
								end_index:   number
								start_index: number
								str_value:   string
								type:        string
							}, ...]
							type: string
						}, ...]
						port:        number
						protocol:    string
						status_code: string
					}, ...]
					status_code: string
					type:        string
				}, ...]
				explicit_tracking: bool
				fine_grain:        bool
				http_cookie:       string
				http_header:       string
				rate_limiter: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
		}, ...]
	}, ...]
	http_profile?: [{
		allow_dots_in_header_name: bool
		cache_config: [{
			age_header:                   bool
			aggressive:                   bool
			date_header:                  bool
			default_expire:               number
			enabled:                      bool
			heuristic_expire:             bool
			ignore_request_cache_control: bool
			max_cache_size:               number
			max_object_size:              number
			mime_types_black_group_refs: [string, ...]
			mime_types_black_list: [string, ...]
			mime_types_group_refs: [string, ...]
			mime_types_list: [string, ...]
			min_object_size: number
			query_cacheable: bool
			uri_non_cacheable: [{
				match_case:     string
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
			xcache_header: bool
		}, ...]
		client_body_timeout:     number
		client_header_timeout:   number
		client_max_body_size:    number
		client_max_header_size:  number
		client_max_request_size: number
		compression_profile: [{
			compressible_content_ref: string
			compression:              bool
			filter: [{
				devices_ref: string
				index:       number
				ip_addr_prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ip_addr_ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
				ip_addrs: [{
					addr: string
					type: string
				}, ...]
				ip_addrs_ref: string
				level:        string
				match:        string
				name:         string
				user_agent: [string, ...]
			}, ...]
			remove_accept_encoding_header: bool
			type:                          string
		}, ...]
		connection_multiplexing_enabled:                  bool
		disable_keepalive_posts_msie6:                    bool
		disable_sni_hostname_check:                       bool
		enable_chunk_merge:                               bool
		enable_fire_and_forget:                           bool
		enable_request_body_buffering:                    bool
		enable_request_body_metrics:                      bool
		fwd_close_hdr_for_bound_connections:              bool
		hsts_enabled:                                     bool
		hsts_max_age:                                     number
		hsts_subdomains_enabled:                          bool
		http2_enabled:                                    bool
		http_to_https:                                    bool
		httponly_enabled:                                 bool
		keepalive_header:                                 bool
		keepalive_timeout:                                number
		max_bad_rps_cip:                                  number
		max_bad_rps_cip_uri:                              number
		max_bad_rps_uri:                                  number
		max_http2_concurrent_streams_per_connection:      number
		max_http2_control_frames_per_connection:          number
		max_http2_empty_data_frames_per_connection:       number
		max_http2_queued_frames_to_client_per_connection: number
		max_keepalive_requests:                           number
		max_response_headers_size:                        number
		max_rps_cip:                                      number
		max_rps_cip_uri:                                  number
		max_rps_unknown_cip:                              number
		max_rps_unknown_uri:                              number
		max_rps_uri:                                      number
		pki_profile_ref:                                  string
		post_accept_timeout:                              number
		reset_conn_http_on_ssl_port:                      bool
		respond_with_100_continue:                        bool
		secure_cookie_enabled:                            bool
		server_side_redirect_to_https:                    bool
		ssl_client_certificate_action: [{
			close_connection: bool
			headers: [{
				request_header:       string
				request_header_value: string
			}, ...]
		}, ...]
		ssl_client_certificate_mode: string
		use_app_keepalive_timeout:   bool
		websockets_enabled:          bool
		x_forwarded_proto_enabled:   bool
		xff_alternate_name:          string
		xff_enabled:                 bool
	}, ...]
	id?:                   string
	name?:                 string
	preserve_client_ip?:   bool
	preserve_client_port?: bool
	sip_service_profile?: [{
		transaction_timeout: number
	}, ...]
	tcp_app_profile?: [{
		pki_profile_ref:             string
		proxy_protocol_enabled:      bool
		proxy_protocol_version:      string
		ssl_client_certificate_mode: string
	}, ...]
	tenant_ref?: string
	type?:       string
	uuid?:       string
}
#AviAuthprofileDataSource: {
	description?: string
	http?: [{
		cache_expiration_time: number
		request_header:        string
		require_user_groups: [string, ...]
	}, ...]
	id?: string
	ldap?: [{
		base_dn:               string
		bind_as_administrator: bool
		email_attribute:       string
		full_name_attribute:   string
		port:                  number
		security_mode:         string
		server: [string, ...]
		settings: [{
			admin_bind_dn:           string
			group_filter:            string
			group_member_attribute:  string
			group_member_is_full_dn: bool
			group_search_dn:         string
			group_search_scope:      string
			ignore_referrals:        bool
			password:                string
			user_attributes: [string, ...]
			user_id_attribute: string
			user_search_dn:    string
			user_search_scope: string
		}, ...]
		user_bind: [{
			dn_template: string
			token:       string
			user_attributes: [string, ...]
			user_id_attribute: string
		}, ...]
	}, ...]
	name?:         string
	pa_agent_ref?: string
	saml?: [{
		idp: [{
			metadata: string
		}, ...]
		sp: [{
			fqdn:             string
			org_display_name: string
			org_name:         string
			org_url:          string
			saml_entity_type: string
			sp_nodes: [{
				entity_id:                           string
				name:                                string
				signing_ssl_key_and_certificate_ref: string
				single_signon_url:                   string
			}, ...]
			tech_contact_email: string
			tech_contact_name:  string
		}, ...]
	}, ...]
	tacacs_plus?: [{
		authorization_attrs: [{
			mandatory: bool
			name:      string
			value:     string
		}, ...]
		password: string
		port:     number
		server: [string, ...]
		service: string
	}, ...]
	tenant_ref?: string
	type?:       string
	uuid?:       string
}
#AviAutoscalelaunchconfigDataSource: {
	description?: string
	id?:          string
	image_id?:    string
	mesos?: [{
		force: bool
	}, ...]
	name?: string
	openstack?: [{
		heat_scale_down_url: string
		heat_scale_up_url:   string
	}, ...]
	tenant_ref?:       string
	use_external_asg?: bool
	uuid?:             string
}
#AviBackupDataSource: {
	backup_config_ref?: string
	file_name?:         string
	id?:                string
	local_file_url?:    string
	remote_file_url?:   string
	scheduler_ref?:     string
	tenant_ref?:        string
	timestamp?:         string
	uuid?:              string
}
#AviBackupconfigurationDataSource: {
	aws_access_key?:         string
	aws_bucket_id?:          string
	aws_secret_access?:      string
	backup_file_prefix?:     string
	backup_passphrase?:      string
	id?:                     string
	maximum_backups_stored?: number
	name?:                   string
	remote_directory?:       string
	remote_hostname?:        string
	save_local?:             bool
	ssh_user_ref?:           string
	tenant_ref?:             string
	upload_to_remote_host?:  bool
	upload_to_s3?:           bool
	uuid?:                   string
}
#AviCertificatemanagementprofileDataSource: {
	id?:   string
	name?: string
	script_params?: [{
		is_dynamic:   bool
		is_sensitive: bool
		name:         string
		value:        string
	}, ...]
	script_path?: string
	tenant_ref?:  string
	uuid?:        string
}
#AviCloudDataSource: {
	apic_configuration?: [{
		apic_admin_tenant: string
		apic_domain:       string
		apic_name: [string, ...]
		apic_password:  string
		apic_username:  string
		context_aware:  string
		se_tunnel_mode: bool
	}, ...]
	apic_mode?:                  bool
	autoscale_polling_interval?: number
	aws_configuration?: [{
		access_key_id:     string
		asg_poll_interval: number
		ebs_encryption: [{
			master_key: string
			mode:       string
		}, ...]
		free_elasticips:            bool
		iam_assume_role:            string
		publish_vip_to_public_zone: bool
		region:                     string
		route53_integration:        bool
		s3_encryption: [{
			master_key: string
			mode:       string
		}, ...]
		secret_access_key: string
		sqs_encryption: [{
			master_key: string
			mode:       string
		}, ...]
		ttl:           number
		use_iam_roles: bool
		use_sns_sqs:   bool
		vpc:           string
		vpc_id:        string
		zones: [{
			availability_zone: string
			mgmt_network_name: string
			mgmt_network_uuid: string
		}, ...]
	}, ...]
	azure_configuration?: [{
		availability_zones: [string, ...]
		cloud_credentials_ref: string
		location:              string
		network_info: [{
			management_network_id: string
			se_network_id:         string
			virtual_network_id:    string
		}, ...]
		resource_group:    string
		subscription_id:   string
		use_azure_dns:     bool
		use_enhanced_ha:   bool
		use_managed_disks: bool
		use_standard_alb:  bool
	}, ...]
	cloudstack_configuration?: [{
		access_key_id:     string
		api_url:           string
		cntr_public_ip:    string
		hypervisor:        string
		mgmt_network_name: string
		mgmt_network_uuid: string
		secret_access_key: string
	}, ...]
	custom_tags?: [{
		tag_key: string
		tag_val: string
	}, ...]
	dhcp_enabled?:         bool
	dns_provider_ref?:     string
	dns_resolution_on_se?: bool
	docker_configuration?: [{
		app_sync_frequency:                 number
		ca_tls_key_and_certificate_ref:     string
		client_tls_key_and_certificate_ref: string
		container_port_match_http_service:  bool
		coredump_directory:                 string
		disable_auto_backend_service_sync:  bool
		disable_auto_frontend_service_sync: bool
		disable_auto_se_creation:           bool
		docker_registry_se: [{
			oshift_registry: [{
				registry_namespace: string
				registry_service:   string
				registry_vip: [{
					addr: string
					type: string
				}, ...]
			}, ...]
			password: string
			private:  bool
			registry: string
			username: string
		}, ...]
		east_west_placement_subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		enable_event_subscription:         bool
		feproxy_container_port_as_service: bool
		feproxy_vips_enable_proxy_arp:     bool
		fleet_endpoint:                    string
		http_container_ports: [number, ...]
		se_deployment_method: string
		se_exclude_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_include_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_spawn_rate:                      number
		se_volume:                          string
		services_accessible_all_interfaces: bool
		ssh_user_ref:                       string
		ucp_nodes: [string, ...]
		use_container_ip_port: bool
		use_controller_image:  bool
	}, ...]
	east_west_dns_provider_ref?:   string
	east_west_ipam_provider_ref?:  string
	enable_vip_on_all_interfaces?: bool
	enable_vip_static_routes?:     bool
	gcp_configuration?: [{
		cloud_credentials_ref: string
		encryption_key_id:     string
		firewall_target_tags: [string, ...]
		gcs_bucket_name: string
		gcs_project_id:  string
		network_config: [{
			config: string
			inband: [{
				vpc_network_name: string
				vpc_project_id:   string
				vpc_subnet_name:  string
			}, ...]
			one_arm: [{
				data_vpc_network_name:       string
				data_vpc_project_id:         string
				data_vpc_subnet_name:        string
				management_vpc_network_name: string
				management_vpc_subnet_name:  string
			}, ...]
			two_arm: [{
				backend_data_vpc_network_name:  string
				backend_data_vpc_subnet_name:   string
				frontend_data_vpc_network_name: string
				frontend_data_vpc_project_id:   string
				frontend_data_vpc_subnet_name:  string
				management_vpc_network_name:    string
				management_vpc_subnet_name:     string
			}, ...]
		}, ...]
		region_name:   string
		se_project_id: string
		vip_allocation_strategy: [{
			ilb: [{
				cloud_router_names: [string, ...]
			}, ...]
			mode: string
			routes: [{
				match_se_group_subnet: bool
			}, ...]
		}, ...]
		zones: [string, ...]
	}, ...]
	id?:                  string
	ip6_autocfg_enabled?: bool
	ipam_provider_ref?:   string
	license_tier?:        string
	license_type?:        string
	linuxserver_configuration?: [{
		hosts: [{
			host_attr: [{
				attr_key: string
				attr_val: string
			}, ...]
			host_ip: [{
				addr: string
				type: string
			}, ...]
			node_availability_zone: string
			se_group_ref:           string
		}, ...]
		se_inband_mgmt:      bool
		se_log_disk_path:    string
		se_log_disk_size_gb: number
		se_sys_disk_path:    string
		se_sys_disk_size_gb: number
		ssh_user_ref:        string
	}, ...]
	mtu?:  number
	name?: string
	nsx_configuration?: [{
		avi_nsx_prefix:       string
		nsx_manager_name:     string
		nsx_manager_password: string
		nsx_manager_username: string
		nsx_poll_time:        number
	}, ...]
	obj_name_prefix?: string
	openstack_configuration?: [{
		admin_tenant:            string
		admin_tenant_uuid:       string
		allowed_address_pairs:   bool
		anti_affinity:           bool
		auth_url:                string
		config_drive:            bool
		contrail_disable_policy: bool
		contrail_endpoint:       string
		contrail_plugin:         bool
		custom_se_image_properties: [{
			name:  string
			value: string
		}, ...]
		external_networks: bool
		free_floatingips:  bool
		hypervisor:        string
		hypervisor_properties: [{
			hypervisor: string
			image_properties: [{
				name:  string
				value: string
			}, ...]
		}, ...]
		img_format:              string
		import_keystone_tenants: bool
		insecure:                bool
		keystone_host:           string
		map_admin_to_cloudadmin: bool
		mgmt_network_name:       string
		mgmt_network_uuid:       string
		name_owner:              bool
		neutron_rbac:            bool
		nuage_organization:      string
		nuage_password:          string
		nuage_port:              number
		nuage_username:          string
		nuage_virtualip:         bool
		nuage_vsd_host:          string
		password:                string
		port_security:           bool
		privilege:               string
		prov_name: [string, ...]
		provider_vip_networks: [{
			os_network_uuid: string
			os_tenant_uuids: [string, ...]
		}, ...]
		region: string
		role_mapping: [{
			avi_role: string
			os_role:  string
		}, ...]
		security_groups:        bool
		tenant_se:              bool
		use_admin_url:          bool
		use_internal_endpoints: bool
		use_keystone_auth:      bool
		use_nuagevip:           bool
		username:               string
	}, ...]
	oshiftk8s_configuration?: [{
		app_sync_frequency: number
		auto_assign_fqdn:   bool
		avi_bridge_subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		ca_tls_key_and_certificate_ref:       string
		client_tls_key_and_certificate_ref:   string
		cluster_tag:                          string
		container_port_match_http_service:    bool
		coredump_directory:                   string
		default_service_as_east_west_service: bool
		disable_auto_backend_service_sync:    bool
		disable_auto_frontend_service_sync:   bool
		disable_auto_gs_sync:                 bool
		disable_auto_se_creation:             bool
		docker_endpoint:                      string
		docker_registry_se: [{
			oshift_registry: [{
				registry_namespace: string
				registry_service:   string
				registry_vip: [{
					addr: string
					type: string
				}, ...]
			}, ...]
			password: string
			private:  bool
			registry: string
			username: string
		}, ...]
		east_west_placement_subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		enable_event_subscription:      bool
		enable_route_ingress_hardening: bool
		feproxy_vips_enable_proxy_arp:  bool
		http_container_ports: [number, ...]
		ing_exclude_attributes: [{
			attribute: string
			value:     string
		}, ...]
		ing_include_attributes: [{
			attribute: string
			value:     string
		}, ...]
		l4_health_monitoring: bool
		master_nodes: [string, ...]
		node_availability_zone_label: string
		ns_exclude_attributes: [{
			attribute: string
			value:     string
		}, ...]
		ns_include_attributes: [{
			attribute: string
			value:     string
		}, ...]
		num_shards:              number
		override_service_ports:  bool
		persistent_volume_claim: string
		routes: [{
			if_name:           string
			network_namespace: string
			nexthop: [{
				addr: string
				type: string
			}, ...]
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		sdn_overlay:          bool
		se_deployment_method: string
		se_exclude_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_image_pull_secret: string
		se_include_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_namespace: string
		se_pod_tolerations: [{
			effect:             string
			key:                string
			operator:           string
			toleration_seconds: number
			value:              string
		}, ...]
		se_priority_class:                string
		se_restart_batch_size:            number
		se_restart_force:                 bool
		se_volume:                        string
		secure_egress_mode:               bool
		service_account_token:            string
		shard_prefix:                     string
		shared_virtualservice_namespace:  bool
		ssh_user_ref:                     string
		sync_not_ready_addresses:         bool
		use_controller_image:             bool
		use_resource_definition_as_ssot:  bool
		use_scheduling_disabled_nodes:    bool
		use_service_cluster_ip_as_ew_vip: bool
		vip_default_gateway: [{
			addr: string
			type: string
		}, ...]
	}, ...]
	prefer_static_routes?: bool
	proxy_configuration?: [{
		host:     string
		password: string
		port:     number
		username: string
	}, ...]
	rancher_configuration?: [{
		access_key:                         string
		app_sync_frequency:                 number
		container_port_match_http_service:  bool
		coredump_directory:                 string
		disable_auto_backend_service_sync:  bool
		disable_auto_frontend_service_sync: bool
		disable_auto_se_creation:           bool
		docker_registry_se: [{
			oshift_registry: [{
				registry_namespace: string
				registry_service:   string
				registry_vip: [{
					addr: string
					type: string
				}, ...]
			}, ...]
			password: string
			private:  bool
			registry: string
			username: string
		}, ...]
		east_west_placement_subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		enable_event_subscription:         bool
		feproxy_container_port_as_service: bool
		feproxy_vips_enable_proxy_arp:     bool
		fleet_endpoint:                    string
		http_container_ports: [number, ...]
		nuage_controller: [{
			nuage_organization: string
			nuage_password:     string
			nuage_port:         number
			nuage_username:     string
			nuage_vsd_host:     string
			se_domain:          string
			se_enterprise:      string
			se_network:         string
			se_policy_group:    string
			se_user:            string
			se_zone:            string
		}, ...]
		rancher_servers: [string, ...]
		se_deployment_method: string
		se_exclude_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_include_attributes: [{
			attribute: string
			value:     string
		}, ...]
		se_spawn_rate:                      number
		se_volume:                          string
		secret_key:                         string
		services_accessible_all_interfaces: bool
		ssh_user_ref:                       string
		use_container_ip_port:              bool
		use_controller_image:               bool
	}, ...]
	se_group_template_ref?:        string
	state_based_dns_registration?: bool
	tenant_ref?:                   string
	uuid?:                         string
	vca_configuration?: [{
		privilege:        string
		vca_host:         string
		vca_instance:     string
		vca_mgmt_network: string
		vca_orgnization:  string
		vca_password:     string
		vca_username:     string
		vca_vdc:          string
	}, ...]
	vcenter_configuration?: [{
		datacenter: string
		management_ip_subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		management_network:           string
		password:                     string
		privilege:                    string
		username:                     string
		vcenter_template_se_location: string
		vcenter_url:                  string
	}, ...]
	vtype?: string
}
#AviCloudconnectoruserDataSource: {
	azure_serviceprincipal?: [{
		application_id:       string
		authentication_token: string
		tenant_id:            string
	}, ...]
	azure_userpass?: [{
		password:    string
		tenant_name: string
		username:    string
	}, ...]
	gcp_credentials?: [{
		service_account_keyfile_data: string
	}, ...]
	id?:   string
	name?: string
	oci_credentials?: [{
		fingerprint: string
		key_content: string
		pass_phrase: string
		user:        string
	}, ...]
	password?:    string
	private_key?: string
	public_key?:  string
	tenant_ref?:  string
	tencent_credentials?: [{
		secret_id:  string
		secret_key: string
	}, ...]
	uuid?: string
}
#AviCloudpropertiesDataSource: {
	cc_props?: [{
		rpc_poll_interval: number
		rpc_queue_size:    number
	}, ...]
	cc_vtypes?: [string, ...]
	hyp_props?: [{
		htype:           string
		max_ips_per_nic: number
		max_nics:        number
	}, ...]
	id?: string
	info?: [{
		cca_props: [{
			async_retries:        number
			async_retries_delay:  number
			poll_duration_target: number
			poll_fast_target:     number
			poll_slow_target:     number
			vnic_retries:         number
			vnic_retries_delay:   number
		}, ...]
		controller_props: [{
			allow_admin_network_updates:                bool
			allow_ip_forwarding:                        bool
			allow_unauthenticated_apis:                 bool
			allow_unauthenticated_nodes:                bool
			api_idle_timeout:                           number
			api_perf_logging_threshold:                 number
			appviewx_compat_mode:                       bool
			attach_ip_retry_interval:                   number
			attach_ip_retry_limit:                      number
			bm_use_ansible:                             bool
			cleanup_expired_authtoken_timeout_period:   number
			cleanup_sessions_timeout_period:            number
			cloud_reconcile:                            bool
			cluster_ip_gratuitous_arp_period:           number
			consistency_check_timeout_period:           number
			crashed_se_reboot:                          number
			dead_se_detection_timer:                    number
			default_minimum_api_timeout:                number
			dns_refresh_period:                         number
			dummy:                                      number
			enable_api_sharding:                        bool
			enable_memory_balancer:                     bool
			fatal_error_lease_time:                     number
			max_dead_se_in_grp:                         number
			max_pcap_per_tenant:                        number
			max_seq_attach_ip_failures:                 number
			max_seq_vnic_failures:                      number
			permission_scoped_shared_admin_networks:    bool
			persistence_key_rotate_period:              number
			portal_token:                               string
			process_locked_useraccounts_timeout_period: number
			process_pki_profile_timeout_period:         number
			query_host_fail:                            number
			safenet_hsm_version:                        string
			se_create_timeout:                          number
			se_failover_attempt_interval:               number
			se_from_marketplace:                        string
			se_offline_del:                             number
			se_vnic_cooldown:                           number
			secure_channel_cleanup_timeout:             number
			secure_channel_controller_token_timeout:    number
			secure_channel_se_token_timeout:            number
			seupgrade_copy_pool_size:                   number
			seupgrade_fabric_pool_size:                 number
			seupgrade_segroup_min_dead_timeout:         number
			shared_ssl_certificates:                    bool
			ssl_certificate_expiry_warning_days: [number, ...]
			unresponsive_se_reboot:           number
			upgrade_dns_ttl:                  number
			upgrade_lease_time:               number
			uuid:                             string
			vnic_op_fail_time:                number
			vs_apic_scaleout_timeout:         number
			vs_awaiting_se_timeout:           number
			vs_key_rotate_period:             number
			vs_scaleout_ready_check_interval: number
			vs_se_attach_ip_fail:             number
			vs_se_bootup_fail:                number
			vs_se_create_fail:                number
			vs_se_ping_fail:                  number
			vs_se_vnic_fail:                  number
			vs_se_vnic_ip_fail:               number
			warmstart_se_reconnect_wait_time: number
			warmstart_vs_resync_wait_time:    number
		}, ...]
		flavor_props: [{
			cost:             string
			disk_gb:          number
			enhanced_nw:      bool
			id:               string
			is_recommended:   bool
			max_ip6s_per_nic: number
			max_ips_per_nic:  number
			max_nics:         number
			meta: [{
				key:   string
				value: string
			}, ...]
			name:   string
			public: bool
			ram_mb: number
			vcpus:  number
		}, ...]
		flavor_regex_filter: string
		htypes: [string, ...]
		vtype: string
	}, ...]
	uuid?: string
}
#AviClusterDataSource: {
	id?:   string
	name?: string
	nodes?: [{
		categories: [string, ...]
		ip: [{
			addr: string
			type: string
		}, ...]
		name:     string
		password: string
		public_ip_or_name: [{
			addr: string
			type: string
		}, ...]
		vm_hostname: string
		vm_mor:      string
		vm_name:     string
		vm_uuid:     string
	}, ...]
	rejoin_nodes_automatically?: bool
	tenant_ref?:                 string
	uuid?:                       string
	virtual_ip?: [{
		addr: string
		type: string
	}, ...]
	cluster_state?: [{
		progress?: number
		state?:    string
		up_since?: string
	}, ...]
}
#AviClusterclouddetailsDataSource: {
	azure_info?: [{
		cloud_credential_ref: string
		subscription_id:      string
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviControllerportalregistrationDataSource: {
	asset?: [{
		asset_id: string
	}, ...]
	id?:   string
	name?: string
	portal_auth?: [{
		access_token: string
		instance_url: string
		jwt_token:    string
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviControllerpropertiesDataSource: {
	allow_admin_network_updates?:                bool
	allow_ip_forwarding?:                        bool
	allow_unauthenticated_apis?:                 bool
	allow_unauthenticated_nodes?:                bool
	api_idle_timeout?:                           number
	api_perf_logging_threshold?:                 number
	appviewx_compat_mode?:                       bool
	attach_ip_retry_interval?:                   number
	attach_ip_retry_limit?:                      number
	bm_use_ansible?:                             bool
	cleanup_expired_authtoken_timeout_period?:   number
	cleanup_sessions_timeout_period?:            number
	cloud_reconcile?:                            bool
	cluster_ip_gratuitous_arp_period?:           number
	consistency_check_timeout_period?:           number
	crashed_se_reboot?:                          number
	dead_se_detection_timer?:                    number
	default_minimum_api_timeout?:                number
	dns_refresh_period?:                         number
	dummy?:                                      number
	enable_api_sharding?:                        bool
	enable_memory_balancer?:                     bool
	fatal_error_lease_time?:                     number
	id?:                                         string
	max_dead_se_in_grp?:                         number
	max_pcap_per_tenant?:                        number
	max_seq_attach_ip_failures?:                 number
	max_seq_vnic_failures?:                      number
	permission_scoped_shared_admin_networks?:    bool
	persistence_key_rotate_period?:              number
	portal_token?:                               string
	process_locked_useraccounts_timeout_period?: number
	process_pki_profile_timeout_period?:         number
	query_host_fail?:                            number
	safenet_hsm_version?:                        string
	se_create_timeout?:                          number
	se_failover_attempt_interval?:               number
	se_from_marketplace?:                        string
	se_offline_del?:                             number
	se_vnic_cooldown?:                           number
	secure_channel_cleanup_timeout?:             number
	secure_channel_controller_token_timeout?:    number
	secure_channel_se_token_timeout?:            number
	seupgrade_copy_pool_size?:                   number
	seupgrade_fabric_pool_size?:                 number
	seupgrade_segroup_min_dead_timeout?:         number
	shared_ssl_certificates?:                    bool
	ssl_certificate_expiry_warning_days?: [number, ...]
	unresponsive_se_reboot?:           number
	upgrade_dns_ttl?:                  number
	upgrade_lease_time?:               number
	uuid?:                             string
	vnic_op_fail_time?:                number
	vs_apic_scaleout_timeout?:         number
	vs_awaiting_se_timeout?:           number
	vs_key_rotate_period?:             number
	vs_scaleout_ready_check_interval?: number
	vs_se_attach_ip_fail?:             number
	vs_se_bootup_fail?:                number
	vs_se_create_fail?:                number
	vs_se_ping_fail?:                  number
	vs_se_vnic_fail?:                  number
	vs_se_vnic_ip_fail?:               number
	warmstart_se_reconnect_wait_time?: number
	warmstart_vs_resync_wait_time?:    number
}
#AviControllersiteDataSource: {
	address?:    string
	id?:         string
	name?:       string
	port?:       number
	tenant_ref?: string
	uuid?:       string
}
#AviCustomerportalinfoDataSource: {
	id?:               string
	polling_interval?: number
	portal_url?:       string
	uuid?:             string
}
#AviCustomipamdnsprofileDataSource: {
	id?:   string
	name?: string
	script_params?: [{
		is_dynamic:   bool
		is_sensitive: bool
		name:         string
		value:        string
	}, ...]
	script_uri?: string
	tenant_ref?: string
	uuid?:       string
}
#AviDnspolicyDataSource: {
	created_by?:  string
	description?: string
	id?:          string
	name?:        string
	rule?: [{
		action: [{
			allow: [{
				allow:      bool
				reset_conn: bool
			}, ...]
			dns_rate_limiter: [{
				action: [{
					type: string
				}, ...]
				rate_limiter_object: [{
					burst_sz: number
					count:    number
					name:     string
					period:   number
				}, ...]
			}, ...]
			gslb_site_selection: [{
				fallback_site_names: [string, ...]
				is_site_preferred: bool
				site_name:         string
			}, ...]
			pool_switching: [{
				pool_group_ref: string
				pool_ref:       string
			}, ...]
			response: [{
				authoritative: bool
				rcode:         string
				resource_record_sets: [{
					resource_record_set: [{
						cname: [{
							cname: string
						}, ...]
						fqdn: string
						ip6_addresses: [{
							ip6_address: [{
								addr: string
								type: string
							}, ...]
						}, ...]
						ip_addresses: [{
							ip_address: [{
								addr: string
								type: string
							}, ...]
						}, ...]
						nses: [{
							ip6_address: [{
								addr: string
								type: string
							}, ...]
							ip_address: [{
								addr: string
								type: string
							}, ...]
							nsname: string
						}, ...]
						ttl:  number
						type: string
					}, ...]
					section: string
				}, ...]
				truncation: bool
			}, ...]
		}, ...]
		enable: bool
		index:  number
		log:    bool
		match: [{
			client_ip_address: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				use_edns_client_subnet_ip: bool
			}, ...]
			geo_location: [{
				geolocation_name:          string
				geolocation_tag:           string
				match_criteria:            string
				use_edns_client_subnet_ip: bool
			}, ...]
			protocol: [{
				match_criteria: string
				protocol:       string
			}, ...]
			query_name: [{
				match_criteria: string
				query_domain_names: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
			query_type: [{
				match_criteria: string
				query_type: [string, ...]
			}, ...]
		}, ...]
		name: string
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviErrorpagebodyDataSource: {
	error_page_body?: string
	format?:          string
	id?:              string
	name?:            string
	tenant_ref?:      string
	uuid?:            string
}
#AviErrorpageprofileDataSource: {
	error_pages?: [{
		enable:              bool
		error_page_body_ref: string
		error_redirect:      string
		index:               number
		match: [{
			match_criteria: string
			ranges: [{
				begin: number
				end:   number
			}, ...]
			status_codes: [number, ...]
		}, ...]
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviFileserviceDataSource: {
	local_file: string
	uri:        string
	id?:        string
	upload?:    bool
}
#AviGslbDataSource: {
	async_interval?:       number
	clear_on_max_retries?: number
	client_ip_addr_group?: [{
		addrs: [{
			addr: string
			type: string
		}, ...]
		prefixes: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		ranges: [{
			begin: [{
				addr: string
				type: string
			}, ...]
			end: [{
				addr: string
				type: string
			}, ...]
		}, ...]
		type: string
	}, ...]
	description?: string
	dns_configs?: [{
		domain_name: string
	}, ...]
	error_resync_interval?:                   number
	id?:                                      string
	is_federated?:                            bool
	leader_cluster_uuid?:                     string
	maintenance_mode?:                        bool
	name?:                                    string
	send_interval?:                           number
	send_interval_prior_to_maintenance_mode?: number
	sites?: [{
		address:      string
		cluster_uuid: string
		dns_vses: [{
			dns_vs_uuid: string
			domain_names: [string, ...]
		}, ...]
		enabled: bool
		hm_proxies: [{
			proxy_type: string
			site_uuid:  string
		}, ...]
		hm_shard_enabled: bool
		ip_addresses: [{
			addr: string
			type: string
		}, ...]
		location: [{
			location: [{
				latitude:  number
				longitude: number
				name:      string
				tag:       string
			}, ...]
			source: string
		}, ...]
		member_type: string
		name:        string
		password:    string
		port:        number
		ratio:       number
		username:    string
		uuid:        string
	}, ...]
	tenant_ref?: string
	third_party_sites?: [{
		enabled: bool
		hm_proxies: [{
			proxy_type: string
			site_uuid:  string
		}, ...]
		location: [{
			location: [{
				latitude:  number
				longitude: number
				name:      string
				tag:       string
			}, ...]
			source: string
		}, ...]
		name:  string
		ratio: number
		uuid:  string
	}, ...]
	uuid?:    string
	view_id?: number
}
#AviGslbgeodbprofileDataSource: {
	description?: string
	entries?: [{
		file: [{
			filename: string
			format:   string
		}, ...]
		priority: number
	}, ...]
	id?:           string
	is_federated?: bool
	name?:         string
	tenant_ref?:   string
	uuid?:         string
}
#AviGslbserviceDataSource: {
	application_persistence_profile_ref?: string
	controller_health_status_enabled?:    bool
	created_by?:                          string
	description?:                         string
	domain_names?: [string, ...]
	down_response?: [{
		fallback_ip: [{
			addr: string
			type: string
		}, ...]
		fallback_ip6: [{
			addr: string
			type: string
		}, ...]
		type: string
	}, ...]
	enabled?: bool
	groups?: [{
		algorithm:             string
		consistent_hash_mask:  number
		consistent_hash_mask6: number
		description:           string
		enabled:               bool
		fallback_algorithm:    string
		members: [{
			cloud_uuid:   string
			cluster_uuid: string
			description:  string
			enabled:      bool
			fqdn:         string
			hostname:     string
			ip: [{
				addr: string
				type: string
			}, ...]
			location: [{
				location: [{
					latitude:  number
					longitude: number
					name:      string
					tag:       string
				}, ...]
				source: string
			}, ...]
			public_ip: [{
				ip: [{
					addr: string
					type: string
				}, ...]
			}, ...]
			ratio:              number
			resolve_fqdn_to_v6: bool
			vs_uuid:            string
		}, ...]
		name:     string
		priority: number
	}, ...]
	health_monitor_refs?: [string, ...]
	health_monitor_scope?:     string
	hm_off?:                   bool
	id?:                       string
	is_federated?:             bool
	min_members?:              number
	name?:                     string
	num_dns_ip?:               number
	pool_algorithm?:           string
	resolve_cname?:            bool
	site_persistence_enabled?: bool
	tenant_ref?:               string
	ttl?:                      number
	use_edns_client_subnet?:   bool
	uuid?:                     string
	wildcard_match?:           bool
}
#AviHardwaresecuritymodulegroupDataSource: {
	hsm?: [{
		cloudhsm: [{
			cluster_cert:         string
			crypto_user_name:     string
			crypto_user_password: string
			hsm_ip: [string, ...]
		}, ...]
		nethsm: [{
			esn:       string
			keyhash:   string
			module_id: number
			priority:  number
			remote_ip: [{
				addr: string
				type: string
			}, ...]
			remote_port: number
		}, ...]
		rfs: [{
			ip: [{
				addr: string
				type: string
			}, ...]
			port: number
		}, ...]
		sluna: [{
			ha_group_num: number
			is_ha:        bool
			node_info: [{
				chrystoki_conf:       string
				client_cert:          string
				client_ip:            string
				client_priv_key:      string
				session_major_number: number
				session_minor_number: number
			}, ...]
			server: [{
				index:                   number
				partition_passwd:        string
				partition_serial_number: string
				remote_ip:               string
				server_cert:             string
			}, ...]
			server_pem:            string
			use_dedicated_network: bool
		}, ...]
		type: string
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviHealthmonitorDataSource: {
	allow_duplicate_monitors?: bool
	description?:              string
	disable_quickstart?:       bool
	dns_monitor?: [{
		qtype:           string
		query_name:      string
		rcode:           string
		record_type:     string
		response_string: string
	}, ...]
	external_monitor?: [{
		command_code:       string
		command_parameters: string
		command_path:       string
		command_variables:  string
	}, ...]
	failed_checks?: number
	http_monitor?: [{
		exact_http_request: bool
		http_request:       string
		http_response:      string
		http_response_code: [string, ...]
		maintenance_code: [number, ...]
		maintenance_response: string
		ssl_attributes: [{
			pki_profile_ref:             string
			server_name:                 string
			ssl_key_and_certificate_ref: string
			ssl_profile_ref:             string
		}, ...]
	}, ...]
	https_monitor?: [{
		exact_http_request: bool
		http_request:       string
		http_response:      string
		http_response_code: [string, ...]
		maintenance_code: [number, ...]
		maintenance_response: string
		ssl_attributes: [{
			pki_profile_ref:             string
			server_name:                 string
			ssl_key_and_certificate_ref: string
			ssl_profile_ref:             string
		}, ...]
	}, ...]
	id?:           string
	is_federated?: bool
	monitor_port?: number
	name?:         string
	radius_monitor?: [{
		password:      string
		shared_secret: string
		username:      string
	}, ...]
	receive_timeout?: number
	send_interval?:   number
	sip_monitor?: [{
		sip_monitor_transport: string
		sip_request_code:      string
		sip_response:          string
	}, ...]
	successful_checks?: number
	tcp_monitor?: [{
		maintenance_response: string
		tcp_half_open:        bool
		tcp_request:          string
		tcp_response:         string
	}, ...]
	tenant_ref?: string
	type?:       string
	udp_monitor?: [{
		maintenance_response: string
		udp_request:          string
		udp_response:         string
	}, ...]
	uuid?: string
}
#AviHttppolicysetDataSource: {
	cloud_config_cksum?: string
	created_by?:         string
	description?:        string
	http_request_policy?: [{
		rules: [{
			all_headers: bool
			enable:      bool
			hdr_action: [{
				action: string
				cookie: [{
					name:  string
					value: string
				}, ...]
				hdr: [{
					name: string
					value: [{
						val: string
						var: string
					}, ...]
				}, ...]
			}, ...]
			index: number
			log:   bool
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				cookie: [{
					match_case:     string
					match_criteria: string
					name:           string
					value:          string
				}, ...]
				hdrs: [{
					hdr:            string
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				method: [{
					match_criteria: string
					methods: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				protocol: [{
					match_criteria: string
					protocols:      string
				}, ...]
				query: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				version: [{
					match_criteria: string
					versions: [string, ...]
				}, ...]
				vs_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
			}, ...]
			name: string
			redirect_action: [{
				host: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				keep_query: bool
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				port:        number
				protocol:    string
				status_code: string
			}, ...]
			rewrite_url_action: [{
				host_hdr: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				query: [{
					add_string: string
					keep_query: bool
				}, ...]
			}, ...]
			switching_action: [{
				action: string
				file: [{
					content_type: string
					file_content: string
				}, ...]
				pool_group_ref: string
				pool_ref:       string
				server: [{
					hostname: string
					ip: [{
						addr: string
						type: string
					}, ...]
					port: number
				}, ...]
				status_code: string
			}, ...]
		}, ...]
	}, ...]
	http_response_policy?: [{
		rules: [{
			all_headers: bool
			enable:      bool
			hdr_action: [{
				action: string
				cookie: [{
					name:  string
					value: string
				}, ...]
				hdr: [{
					name: string
					value: [{
						val: string
						var: string
					}, ...]
				}, ...]
			}, ...]
			index: number
			loc_hdr_action: [{
				host: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				keep_query: bool
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				port:     number
				protocol: string
			}, ...]
			log: bool
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				cookie: [{
					match_case:     string
					match_criteria: string
					name:           string
					value:          string
				}, ...]
				hdrs: [{
					hdr:            string
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				loc_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				method: [{
					match_criteria: string
					methods: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				protocol: [{
					match_criteria: string
					protocols:      string
				}, ...]
				query: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				rsp_hdrs: [{
					hdr:            string
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				status: [{
					match_criteria: string
					ranges: [{
						begin: number
						end:   number
					}, ...]
					status_codes: [number, ...]
				}, ...]
				version: [{
					match_criteria: string
					versions: [string, ...]
				}, ...]
				vs_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
	http_security_policy?: [{
		rules: [{
			action: [{
				action: string
				file: [{
					content_type: string
					file_content: string
				}, ...]
				https_port: number
				rate_profile: [{
					action: [{
						file: [{
							content_type: string
							file_content: string
						}, ...]
						redirect: [{
							host: [{
								tokens: [{
									end_index:   number
									start_index: number
									str_value:   string
									type:        string
								}, ...]
								type: string
							}, ...]
							keep_query: bool
							path: [{
								tokens: [{
									end_index:   number
									start_index: number
									str_value:   string
									type:        string
								}, ...]
								type: string
							}, ...]
							port:        number
							protocol:    string
							status_code: string
						}, ...]
						status_code: string
						type:        string
					}, ...]
					per_client_ip: bool
					per_uri_path:  bool
					rate_limiter: [{
						burst_sz: number
						count:    number
						name:     string
						period:   number
					}, ...]
				}, ...]
				status_code: string
			}, ...]
			enable: bool
			index:  number
			log:    bool
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				cookie: [{
					match_case:     string
					match_criteria: string
					name:           string
					value:          string
				}, ...]
				hdrs: [{
					hdr:            string
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				method: [{
					match_criteria: string
					methods: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				protocol: [{
					match_criteria: string
					protocols:      string
				}, ...]
				query: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				version: [{
					match_criteria: string
					versions: [string, ...]
				}, ...]
				vs_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
	id?:                 string
	is_internal_policy?: bool
	name?:               string
	tenant_ref?:         string
	uuid?:               string
}
#AviImageDataSource: {
	controller_info?: [{
		build: [{
			build_no:      number
			date:          string
			min_version:   string
			patch_version: string
			product:       string
			product_name:  string
			tag:           string
			version:       string
		}, ...]
		hash: string
		patch: [{
			patch_type: string
			reboot:     bool
			reboot_list: [{
				patch_version: string
				reboot:        bool
			}, ...]
		}, ...]
		path: string
	}, ...]
	controller_patch_uuid?: string
	id?:                    string
	migrations?: [{
		api_version:                        string
		controller_host_min_free_disk_size: number
		controller_min_free_disk_size:      number
		max_active_versions:                number
		rollback_controller_disk_space:     number
		rollback_se_disk_space:             number
		se_host_min_free_disk_size:         number
		se_min_free_disk_size:              number
		versions: [string, ...]
	}, ...]
	name?: string
	se_info?: [{
		build: [{
			build_no:      number
			date:          string
			min_version:   string
			patch_version: string
			product:       string
			product_name:  string
			tag:           string
			version:       string
		}, ...]
		hash: string
		patch: [{
			patch_type: string
			reboot:     bool
			reboot_list: [{
				patch_version: string
				reboot:        bool
			}, ...]
		}, ...]
		path: string
	}, ...]
	se_patch_uuid?: string
	status?:        string
	tenant_ref?:    string
	type?:          string
	uber_bundle?:   bool
	uuid?:          string
}
#AviIpaddrgroupDataSource: {
	addrs?: [{
		addr: string
		type: string
	}, ...]
	apic_epg_name?: string
	country_codes?: [string, ...]
	description?: string
	id?:          string
	ip_ports?: [{
		hostname: string
		ip: [{
			addr: string
			type: string
		}, ...]
		name: string
		port: number
	}, ...]
	marathon_app_name?:     string
	marathon_service_port?: number
	name?:                  string
	prefixes?: [{
		ip_addr: [{
			addr: string
			type: string
		}, ...]
		mask: number
	}, ...]
	ranges?: [{
		begin: [{
			addr: string
			type: string
		}, ...]
		end: [{
			addr: string
			type: string
		}, ...]
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviIpamdnsproviderprofileDataSource: {
	allocate_ip_in_vrf?: bool
	aws_profile?: [{
		access_key_id: string
		egress_service_subnets: [string, ...]
		iam_assume_role:            string
		publish_vip_to_public_zone: bool
		region:                     string
		secret_access_key:          string
		ttl:                        number
		usable_domains: [string, ...]
		usable_network_uuids: [string, ...]
		use_iam_roles: bool
		vpc:           string
		vpc_id:        string
		zones: [{
			availability_zone: string
			usable_network_uuids: [string, ...]
		}, ...]
	}, ...]
	azure_profile?: [{
		azure_serviceprincipal: [{
			application_id:       string
			authentication_token: string
			tenant_id:            string
		}, ...]
		azure_userpass: [{
			password:    string
			tenant_name: string
			username:    string
		}, ...]
		egress_service_subnets: [string, ...]
		resource_group:  string
		subscription_id: string
		usable_domains: [string, ...]
		usable_network_uuids: [string, ...]
		use_enhanced_ha:  bool
		use_standard_alb: bool
		virtual_network_ids: [string, ...]
	}, ...]
	custom_profile?: [{
		custom_ipam_dns_profile_ref: string
		dynamic_params: [{
			is_dynamic:   bool
			is_sensitive: bool
			name:         string
			value:        string
		}, ...]
		usable_domains: [string, ...]
		usable_subnets: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
	}, ...]
	gcp_profile?: [{
		match_se_group_subnet:   bool
		network_host_project_id: string
		region_name:             string
		se_project_id:           string
		usable_network_refs: [string, ...]
		use_gcp_network:  bool
		vpc_network_name: string
	}, ...]
	id?: string
	infoblox_profile?: [{
		dns_view: string
		extensible_attributes: [{
			is_dynamic:   bool
			is_sensitive: bool
			name:         string
			value:        string
		}, ...]
		ip_address: [{
			addr: string
			type: string
		}, ...]
		network_view: string
		password:     string
		usable_alloc_subnets: [{
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		usable_domains: [string, ...]
		username:     string
		wapi_version: string
	}, ...]
	internal_profile?: [{
		dns_service_domain: [{
			domain_name:  string
			num_dns_ip:   number
			pass_through: bool
			record_ttl:   number
		}, ...]
		dns_virtualservice_ref: string
		ttl:                    number
		usable_network_refs: [string, ...]
	}, ...]
	name?: string
	oci_profile?: [{
		cloud_credentials_ref: string
		region:                string
		tenancy:               string
		vcn_compartment_id:    string
		vcn_id:                string
	}, ...]
	openstack_profile?: [{
		keystone_host:    string
		password:         string
		region:           string
		tenant:           string
		username:         string
		vip_network_name: string
	}, ...]
	proxy_configuration?: [{
		host:     string
		password: string
		port:     number
		username: string
	}, ...]
	tenant_ref?: string
	tencent_profile?: [{
		cloud_credentials_ref: string
		region:                string
		usable_subnet_ids: [string, ...]
		vpc_id: string
		zones: [{
			availability_zone: string
			usable_subnet_id:  string
		}, ...]
	}, ...]
	type?: string
	uuid?: string
}
#AviL4PolicysetDataSource: {
	created_by?:         string
	description?:        string
	id?:                 string
	is_internal_policy?: bool
	l4_connection_policy?: [{
		rules: [{
			action: [{
				select_pool: [{
					action_type:    string
					pool_group_ref: string
					pool_ref:       string
				}, ...]
			}, ...]
			enable: bool
			index:  number
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				port: [{
					match_criteria: string
					port_ranges: [{
						end:   number
						start: number
					}, ...]
					ports: [number, ...]
				}, ...]
				protocol: [{
					match_criteria: string
					protocol:       string
				}, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviMicroservicegroupDataSource: {
	created_by?:  string
	description?: string
	id?:          string
	name?:        string
	service_refs?: [string, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviNatpolicyDataSource: {
	created_by?:  string
	description?: string
	id?:          string
	name?:        string
	rules?: [{
		action: [{
			nat_info: [{
				nat_ip: [{
					addr: string
					type: string
				}, ...]
				nat_ip_range: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
			type: string
		}, ...]
		created_by: string
		enable:     bool
		index:      number
		match: [{
			destination_ip: [{
				addrs: [{
					addr: string
					type: string
				}, ...]
				group_refs: [string, ...]
				match_criteria: string
				prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
			services: [{
				destination_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
				source_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
			}, ...]
			source_ip: [{
				addrs: [{
					addr: string
					type: string
				}, ...]
				group_refs: [string, ...]
				match_criteria: string
				prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
		}, ...]
		name: string
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviNetworkDataSource: {
	cloud_ref?: string
	configured_subnets?: [{
		prefix: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		static_ips: [{
			addr: string
			type: string
		}, ...]
		static_ranges: [{
			begin: [{
				addr: string
				type: string
			}, ...]
			end: [{
				addr: string
				type: string
			}, ...]
		}, ...]
	}, ...]
	dhcp_enabled?:               bool
	exclude_discovered_subnets?: bool
	id?:                         string
	ip6_autocfg_enabled?:        bool
	labels?: [{
		key:   string
		value: string
	}, ...]
	name?:            string
	synced_from_se?:  bool
	tenant_ref?:      string
	uuid?:            string
	vcenter_dvs?:     bool
	vrf_context_ref?: string
}
#AviNetworkprofileDataSource: {
	connection_mirror?: bool
	description?:       string
	id?:                string
	name?:              string
	profile?: [{
		tcp_fast_path_profile: [{
			dsr_profile: [{
				dsr_encap_type: string
				dsr_type:       string
			}, ...]
			enable_syn_protection: bool
			session_idle_timeout:  number
		}, ...]
		tcp_proxy_profile: [{
			aggressive_congestion_avoidance:    bool
			automatic:                          bool
			cc_algo:                            string
			congestion_recovery_scaling_factor: number
			idle_connection_timeout:            number
			idle_connection_type:               string
			ignore_time_wait:                   bool
			ip_dscp:                            number
			keepalive_in_halfclose_state:       bool
			max_retransmissions:                number
			max_segment_size:                   number
			max_syn_retransmissions:            number
			min_rexmt_timeout:                  number
			nagles_algorithm:                   bool
			reassembly_queue_size:              number
			receive_window:                     number
			reorder_threshold:                  number
			slow_start_scaling_factor:          number
			time_wait_delay:                    number
			use_interface_mtu:                  bool
		}, ...]
		type: string
		udp_fast_path_profile: [{
			dsr_profile: [{
				dsr_encap_type: string
				dsr_type:       string
			}, ...]
			per_pkt_loadbalance:  bool
			session_idle_timeout: number
			snat:                 bool
		}, ...]
		udp_proxy_profile: [{
			session_idle_timeout: number
		}, ...]
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviNetworksecuritypolicyDataSource: {
	cloud_config_cksum?: string
	created_by?:         string
	description?:        string
	id?:                 string
	name?:               string
	rules?: [{
		action:     string
		age:        number
		created_by: string
		enable:     bool
		index:      number
		log:        bool
		match: [{
			client_ip: [{
				addrs: [{
					addr: string
					type: string
				}, ...]
				group_refs: [string, ...]
				match_criteria: string
				prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
			microservice: [{
				group_ref:      string
				match_criteria: string
			}, ...]
			vs_port: [{
				match_criteria: string
				ports: [number, ...]
			}, ...]
		}, ...]
		name: string
		rl_param: [{
			burst_size: number
			max_rate:   number
		}, ...]
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviNetworkserviceDataSource: {
	cloud_ref?: string
	id?:        string
	name?:      string
	routing_service?: [{
		advertise_backend_networks:   bool
		enable_routing:               bool
		enable_vip_on_all_interfaces: bool
		enable_vmac:                  bool
		floating_intf_ip: [{
			addr: string
			type: string
		}, ...]
		floating_intf_ip_se_2: [{
			addr: string
			type: string
		}, ...]
		flowtable_profile: [{
			tcp_closed_timeout:           number
			tcp_connection_setup_timeout: number
			tcp_half_closed_timeout:      number
			tcp_idle_timeout:             number
			tcp_reset_timeout:            number
			udp_idle_timeout:             number
		}, ...]
		graceful_restart:         bool
		nat_policy_ref:           string
		routing_by_linux_ipstack: bool
	}, ...]
	se_group_ref?: string
	service_type?: string
	tenant_ref?:   string
	uuid?:         string
	vrf_ref?:      string
}
#AviObjectaccesspolicyDataSource: {
	id?:   string
	name?: string
	rules?: [{
		matches: [{
			label_key: string
			label_values: [string, ...]
		}, ...]
		name: string
		obj_types: [string, ...]
		privilege: string
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviPingaccessagentDataSource: {
	description?:         string
	id?:                  string
	name?:                string
	pingaccess_pool_ref?: string
	primary_server?: [{
		hostname: string
		ip: [{
			addr: string
			type: string
		}, ...]
		port: number
	}, ...]
	properties_file_data?: string
	tenant_ref?:           string
	uuid?:                 string
}
#AviPkiprofileDataSource: {
	ca_certs?: [{
		certificate:                 string
		certificate_signing_request: string
		chain_verified:              bool
		days_until_expire:           number
		expiry_status:               string
		fingerprint:                 string
		issuer: [{
			common_name:        string
			country:            string
			distinguished_name: string
			email_address:      string
			locality:           string
			organization:       string
			organization_unit:  string
			state:              string
		}, ...]
		key_params: [{
			algorithm: string
			ec_params: [{
				curve: string
			}, ...]
			rsa_params: [{
				exponent: number
				key_size: string
			}, ...]
		}, ...]
		not_after:           string
		not_before:          string
		public_key:          string
		self_signed:         bool
		serial_number:       string
		signature:           string
		signature_algorithm: string
		subject: [{
			common_name:        string
			country:            string
			distinguished_name: string
			email_address:      string
			locality:           string
			organization:       string
			organization_unit:  string
			state:              string
		}, ...]
		subject_alt_names: [string, ...]
		text:    string
		version: string
	}, ...]
	created_by?: string
	crl_check?:  bool
	crls?: [{
		body:               string
		common_name:        string
		distinguished_name: string
		etag:               string
		fingerprint:        string
		last_refreshed:     string
		last_update:        string
		next_update:        string
		server_url:         string
		text:               string
		update_interval:    number
	}, ...]
	id?:                     string
	ignore_peer_chain?:      bool
	is_federated?:           bool
	name?:                   string
	tenant_ref?:             string
	uuid?:                   string
	validate_only_leaf_crl?: bool
}
#AviPoolDataSource: {
	analytics_policy?: [{
		enable_realtime_metrics: bool
	}, ...]
	analytics_profile_ref?:               string
	apic_epg_name?:                       string
	application_persistence_profile_ref?: string
	autoscale_launch_config_ref?:         string
	autoscale_networks?: [string, ...]
	autoscale_policy_ref?:            string
	capacity_estimation?:             bool
	capacity_estimation_ttfb_thresh?: number
	cloud_config_cksum?:              string
	cloud_ref?:                       string
	conn_pool_properties?: [{
		upstream_connpool_conn_idle_tmo:    number
		upstream_connpool_conn_life_tmo:    number
		upstream_connpool_conn_max_reuse:   number
		upstream_connpool_server_max_cache: number
	}, ...]
	connection_ramp_duration?:     number
	created_by?:                   string
	default_server_port?:          number
	delete_server_on_dns_refresh?: bool
	description?:                  string
	domain_name?: [string, ...]
	east_west?: bool
	enabled?:   bool
	external_autoscale_groups?: [string, ...]
	fail_action?: [{
		local_rsp: [{
			file: [{
				content_type: string
				file_content: string
			}, ...]
			status_code: string
		}, ...]
		redirect: [{
			host:        string
			path:        string
			protocol:    string
			query:       string
			status_code: string
		}, ...]
		type: string
	}, ...]
	fewest_tasks_feedback_delay?: number
	graceful_disable_timeout?:    number
	health_monitor_refs?: [string, ...]
	host_check_enabled?:                    bool
	id?:                                    string
	ignore_servers?:                        bool
	inline_health_monitor?:                 bool
	ipaddrgroup_ref?:                       string
	lb_algorithm?:                          string
	lb_algorithm_consistent_hash_hdr?:      string
	lb_algorithm_core_nonaffinity?:         number
	lb_algorithm_hash?:                     string
	lookup_server_by_name?:                 bool
	max_concurrent_connections_per_server?: number
	max_conn_rate_per_server?: [{
		action: [{
			file: [{
				content_type: string
				file_content: string
			}, ...]
			redirect: [{
				host: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				keep_query: bool
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				port:        number
				protocol:    string
				status_code: string
			}, ...]
			status_code: string
			type:        string
		}, ...]
		explicit_tracking: bool
		fine_grain:        bool
		http_cookie:       string
		http_header:       string
		rate_limiter: [{
			burst_sz: number
			count:    number
			name:     string
			period:   number
		}, ...]
	}, ...]
	min_health_monitors_up?: number
	min_servers_up?:         number
	name?:                   string
	networks?: [{
		network_ref:   string
		server_filter: string
	}, ...]
	nsx_securitygroup?: [string, ...]
	pki_profile_ref?: string
	placement_networks?: [{
		network_ref: string
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
	}, ...]
	request_queue_depth?:                number
	request_queue_enabled?:              bool
	rewrite_host_header_to_server_name?: bool
	rewrite_host_header_to_sni?:         bool
	server_name?:                        string
	server_reselect?: [{
		enabled:             bool
		num_retries:         number
		retry_nonidempotent: bool
		retry_timeout:       number
		svr_resp_code: [{
			codes: [number, ...]
			ranges: [{
				begin: number
				end:   number
			}, ...]
			resp_code_block: [string, ...]
		}, ...]
	}, ...]
	server_timeout?: number
	servers?: [{
		autoscaling_group_name: string
		availability_zone:      string
		description:            string
		discovered_networks: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		enabled:                   bool
		external_orchestration_id: string
		external_uuid:             string
		hostname:                  string
		ip: [{
			addr: string
			type: string
		}, ...]
		location: [{
			latitude:  number
			longitude: number
			name:      string
			tag:       string
		}, ...]
		mac_address:           string
		nw_ref:                string
		port:                  number
		prst_hdr_val:          string
		ratio:                 number
		resolve_server_by_dns: bool
		rewrite_host_header:   bool
		server_node:           string
		static:                bool
		verify_network:        bool
		vm_ref:                string
	}, ...]
	service_metadata?:            string
	sni_enabled?:                 bool
	ssl_key_and_certificate_ref?: string
	ssl_profile_ref?:             string
	tenant_ref?:                  string
	use_service_port?:            bool
	uuid?:                        string
	vrf_ref?:                     string
}
#AviPoolgroupDataSource: {
	cloud_config_cksum?:    string
	cloud_ref?:             string
	created_by?:            string
	deployment_policy_ref?: string
	description?:           string
	fail_action?: [{
		local_rsp: [{
			file: [{
				content_type: string
				file_content: string
			}, ...]
			status_code: string
		}, ...]
		redirect: [{
			host:        string
			path:        string
			protocol:    string
			query:       string
			status_code: string
		}, ...]
		type: string
	}, ...]
	id?:                       string
	implicit_priority_labels?: bool
	members?: [{
		deployment_state: string
		pool_ref:         string
		priority_label:   string
		ratio:            number
	}, ...]
	min_servers?:         number
	name?:                string
	priority_labels_ref?: string
	service_metadata?:    string
	tenant_ref?:          string
	uuid?:                string
}
#AviPoolgroupdeploymentpolicyDataSource: {
	auto_disable_old_prod_pools?: bool
	description?:                 string
	evaluation_duration?:         number
	id?:                          string
	name?:                        string
	rules?: [{
		metric_id: string
		operator:  string
		threshold: number
	}, ...]
	scheme?:                    string
	target_test_traffic_ratio?: number
	tenant_ref?:                string
	test_traffic_ratio_rampup?: number
	uuid?:                      string
	webhook_ref?:               string
}
#AviPortalfileuploadDataSource: {
	case_id?:      string
	error?:        string
	file_path?:    string
	id?:           string
	name?:         string
	s3_directory?: string
	status?:       string
	tenant_ref?:   string
	uuid?:         string
}
#AviPrioritylabelsDataSource: {
	cloud_ref?:   string
	description?: string
	equivalent_labels?: [{
		labels: [string, ...]
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviProtocolparserDataSource: {
	description?: string
	id?:          string
	name?:        string
	parser_code?: string
	tenant_ref?:  string
	uuid?:        string
}
#AviRoleDataSource: {
	id?:   string
	name?: string
	privileges?: [{
		resource: string
		type:     string
	}, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviSchedulerDataSource: {
	backup_config_ref?: string
	enabled?:           bool
	end_date_time?:     string
	frequency?:         number
	frequency_unit?:    string
	id?:                string
	name?:              string
	run_mode?:          string
	run_script_ref?:    string
	scheduler_action?:  string
	start_date_time?:   string
	tenant_ref?:        string
	uuid?:              string
}
#AviSecuritypolicyDataSource: {
	description?: string
	dns_attacks?: [{
		attacks: [{
			attack_vector:      string
			enabled:            bool
			max_mitigation_age: number
			mitigation_action: [{
				deny: bool
			}, ...]
			threshold: number
		}, ...]
		oper_mode: string
	}, ...]
	dns_policy_index?:              number
	id?:                            string
	name?:                          string
	network_security_policy_index?: number
	oper_mode?:                     string
	tcp_attacks?: [{}, ...]
	tenant_ref?: string
	udp_attacks?: [{}, ...]
	uuid?: string
}
#AviSepropertiesDataSource: {
	id?: string
	se_agent_properties?: [{
		controller_echo_miss_aggressive_limit:  number
		controller_echo_miss_limit:             number
		controller_echo_rpc_aggressive_timeout: number
		controller_echo_rpc_timeout:            number
		controller_heartbeat_miss_limit:        number
		controller_heartbeat_timeout_sec:       number
		controller_registration_timeout_sec:    number
		controller_rpc_timeout:                 number
		cpustats_interval:                      number
		ctrl_reg_pending_max_wait_time:         number
		debug_mode:                             bool
		dp_aggressive_deq_interval_msec:        number
		dp_aggressive_enq_interval_msec:        number
		dp_batch_size:                          number
		dp_deq_interval_msec:                   number
		dp_enq_interval_msec:                   number
		dp_max_wait_rsp_time_sec:               number
		dp_reg_pending_max_wait_time:           number
		headless_timeout_sec:                   number
		ignore_docker_mac_change:               bool
		ns_helper_deq_interval_msec:            number
		sdb_flush_interval:                     number
		sdb_pipeline_size:                      number
		sdb_scan_count:                         number
		se_grp_change_disruptive:               bool
		seagent_statecache_properties: [{
			sc_batch_buffer_flush_limit:       number
			sc_shard_cleanup_max_time:         number
			sc_state_ring_batch_dequeue_limit: number
			sc_states_flush_interval:          number
			sc_stream_check_interval:          number
			sc_thread_q_batch_dequeue_limit:   number
			sc_thread_q_max_size:              number
			sc_thread_sleep_interval:          number
		}, ...]
		send_se_ready_timeout:       number
		states_flush_interval:       number
		vnic_dhcp_ip_check_interval: number
		vnic_dhcp_ip_max_retries:    number
		vnic_ip_delete_interval:     number
		vnic_probe_interval:         number
		vnic_rpc_retry_interval:     number
		vnicdb_cmd_history_size:     number
	}, ...]
	se_bootup_properties?: [{
		docker_backend_portend:         number
		docker_backend_portstart:       number
		fair_queueing_enabled:          bool
		geo_db_granularity:             number
		l7_conns_per_core:              number
		l7_resvd_listen_conns_per_core: number
		log_agent_debug_enabled:        bool
		log_agent_trace_enabled:        bool
		se_dp_compression: [{
			buf_num:          number
			buf_size:         number
			hash_size:        number
			level_aggressive: number
			level_normal:     number
			window_size:      number
		}, ...]
		se_emulated_cores:                     number
		se_ip_encap_ipc:                       number
		se_l3_encap_ipc:                       number
		se_log_buffer_app_blocking_dequeue:    bool
		se_log_buffer_applog_size:             number
		se_log_buffer_chunk_count:             number
		se_log_buffer_conn_blocking_dequeue:   bool
		se_log_buffer_connlog_size:            number
		se_log_buffer_events_blocking_dequeue: bool
		se_log_buffer_events_size:             number
		ssl_sess_cache_per_vs:                 number
		ssl_sess_cache_timeout:                number
		tcp_syncache_hashsize:                 number
	}, ...]
	se_runtime_properties?: [{
		admin_ssh_enabled: bool
		app_headers: [{
			hdr_match_case: string
			hdr_name:       string
			hdr_string_op:  string
		}, ...]
		baremetal_dispatcher_handles_flows:           bool
		connections_lossy_log_rate_limiter_threshold: number
		connections_udfnf_log_rate_limiter_threshold: number
		disable_flow_probes:                          bool
		dos_profile: [{
			thresh_info: [{
				attack:    string
				max_value: number
				min_value: number
			}, ...]
			thresh_period: number
		}, ...]
		downstream_send_timeout:               number
		dp_aggressive_hb_frequency:            number
		dp_aggressive_hb_timeout_count:        number
		dp_hb_frequency:                       number
		dp_hb_timeout_count:                   number
		dupip_frequency:                       number
		dupip_timeout_count:                   number
		enable_hsm_log:                        bool
		feproxy_vips_enable_proxy_arp:         bool
		flow_table_batch_push_frequency:       number
		global_mtu:                            number
		http_rum_console_log:                  bool
		http_rum_min_content_length:           number
		lbaction_num_requests_to_dispatch:     number
		lbaction_rq_per_request_max_retries:   number
		log_agent_compress_logs:               bool
		log_agent_conn_send_buffer_size:       number
		log_agent_export_msg_buffer_size:      number
		log_agent_export_wait_time:            number
		log_agent_file_sz_appl:                number
		log_agent_file_sz_conn:                number
		log_agent_file_sz_debug:               number
		log_agent_file_sz_event:               number
		log_agent_log_storage_min_sz:          number
		log_agent_max_active_adf_files_per_vs: number
		log_agent_max_concurrent_rsync:        number
		log_agent_max_logmessage_proto_sz:     number
		log_agent_max_storage_excess_percent:  number
		log_agent_max_storage_ignore_percent:  number
		log_agent_min_storage_per_vs:          number
		log_agent_pause_interval:              number
		log_agent_sleep_interval:              number
		log_agent_unknown_vs_timer:            number
		log_message_max_file_list_size:        number
		mcache_enabled:                        bool
		mcache_fetch_enabled:                  bool
		mcache_store_in_enabled:               bool
		mcache_store_in_max_size:              number
		mcache_store_in_min_size:              number
		mcache_store_out_enabled:              bool
		ngx_free_connection_stack:             bool
		persistence_mem_max:                   number
		scaleout_udp_per_pkt:                  bool
		se_auth_ldap_bind_timeout:             number
		se_auth_ldap_cache_size:               number
		se_auth_ldap_connect_timeout:          number
		se_auth_ldap_conns_per_server:         number
		se_auth_ldap_reconnect_timeout:        number
		se_auth_ldap_request_timeout:          number
		se_auth_ldap_servers_failover_only:    bool
		se_dp_compression: [{
			max_low_rtt:  number
			min_high_rtt: number
			min_length:   number
			mobile_str: [string, ...]
		}, ...]
		se_dp_hm_drops:                                number
		se_dp_if_state_poll_interval:                  number
		se_dp_log_nf_enqueue_percent:                  number
		se_dp_log_udf_enqueue_percent:                 number
		se_dump_core_on_assert:                        bool
		se_handle_interface_routes:                    bool
		se_hb_persist_fudge_bits:                      number
		se_mac_error_threshold_to_disable_promiscious: number
		se_memory_poison:                              bool
		se_metrics_interval:                           number
		se_metrics_rt_enabled:                         bool
		se_metrics_rt_interval:                        number
		se_packet_buffer_max:                          number
		se_random_tcp_drops:                           bool
		se_rate_limiters: [{
			arp_rl:        number
			default_rl:    number
			flow_probe_rl: number
			icmp_rl:       number
			icmp_rsp_rl:   number
			rst_rl:        number
		}, ...]
		service_ip_subnets: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		service_port_ranges: [{
			end:   number
			start: number
		}, ...]
		services_accessible_all_interfaces:     bool
		spdy_fwd_proxy_parse_enable:            bool
		tcp_syncache_max_retransmit_default:    number
		upstream_connect_timeout:               number
		upstream_connpool_cache_thresh:         number
		upstream_connpool_conn_idle_thresh_tmo: number
		upstream_connpool_core_max_cache:       number
		upstream_connpool_enable:               bool
		upstream_connpool_strategy:             number
		upstream_keepalive:                     bool
		upstream_read_timeout:                  number
		upstream_send_timeout:                  number
		user_defined_metric_age:                number
	}, ...]
	uuid?: string
}
#AviServerDataSource: {
	ip:                      string
	pool_ref:                string
	autoscaling_group_name?: string
	availability_zone?:      string
	description?:            string
	discovered_networks?: [{
		network_ref: string
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		subnet6: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
	}, ...]
	enabled?:                   bool
	external_orchestration_id?: string
	external_uuid?:             string
	hostname?:                  string
	id?:                        string
	location?: [{
		latitude:  number
		longitude: number
		name:      string
		tag:       string
	}, ...]
	mac_address?:           string
	nw_ref?:                string
	port?:                  number
	prst_hdr_val?:          string
	ratio?:                 number
	resolve_server_by_dns?: bool
	rewrite_host_header?:   bool
	server_node?:           string
	static?:                bool
	type?:                  string
	verify_network?:        bool
	vm_ref?:                string
}
#AviServerautoscalepolicyDataSource: {
	description?:                  string
	id?:                           string
	intelligent_autoscale?:        bool
	intelligent_scalein_margin?:   number
	intelligent_scaleout_margin?:  number
	max_scalein_adjustment_step?:  number
	max_scaleout_adjustment_step?: number
	max_size?:                     number
	min_size?:                     number
	name?:                         string
	scalein_alertconfig_refs?: [string, ...]
	scalein_cooldown?: number
	scaleout_alertconfig_refs?: [string, ...]
	scaleout_cooldown?:  number
	tenant_ref?:         string
	use_predicted_load?: bool
	uuid?:               string
}
#AviServiceengineDataSource: {
	availability_zone?:  string
	cloud_ref?:          string
	container_mode?:     bool
	container_type?:     string
	controller_created?: bool
	controller_ip?:      string
	data_vnics?: [{
		adapter:                 string
		aggregator_chgd:         bool
		can_se_dp_takeover:      bool
		connected:               bool
		del_pending:             bool
		delete_vnic:             bool
		dhcp_enabled:            bool
		dp_deletion_done:        bool
		enabled:                 bool
		if_name:                 string
		ip6_autocfg_enabled:     bool
		is_asm:                  bool
		is_avi_internal_network: bool
		is_hsm:                  bool
		is_mgmt:                 bool
		is_portchannel:          bool
		link_up:                 bool
		linux_name:              string
		mac_address:             string
		members: [{
			active:      bool
			if_name:     string
			mac_address: string
		}, ...]
		mtu:          number
		network_name: string
		network_ref:  string
		pci_id:       string
		port_uuid:    string
		vlan_id:      number
		vlan_interfaces: [{
			dhcp_enabled:        bool
			enabled:             bool
			if_name:             string
			ip6_autocfg_enabled: bool
			is_mgmt:             bool
			vlan_id:             number
			vnic_networks: [{
				ctlr_alloc: bool
				ip: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				mode: string
			}, ...]
			vrf_ref: string
		}, ...]
		vnic_networks: [{
			ctlr_alloc: bool
			ip: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			mode: string
		}, ...]
		vrf_id:  number
		vrf_ref: string
	}, ...]
	enable_state?: string
	flavor?:       string
	host_ref?:     string
	hypervisor?:   string
	id?:           string
	mgmt_vnic?: [{
		adapter:                 string
		aggregator_chgd:         bool
		can_se_dp_takeover:      bool
		connected:               bool
		del_pending:             bool
		delete_vnic:             bool
		dhcp_enabled:            bool
		dp_deletion_done:        bool
		enabled:                 bool
		if_name:                 string
		ip6_autocfg_enabled:     bool
		is_asm:                  bool
		is_avi_internal_network: bool
		is_hsm:                  bool
		is_mgmt:                 bool
		is_portchannel:          bool
		link_up:                 bool
		linux_name:              string
		mac_address:             string
		members: [{
			active:      bool
			if_name:     string
			mac_address: string
		}, ...]
		mtu:          number
		network_name: string
		network_ref:  string
		pci_id:       string
		port_uuid:    string
		vlan_id:      number
		vlan_interfaces: [{
			dhcp_enabled:        bool
			enabled:             bool
			if_name:             string
			ip6_autocfg_enabled: bool
			is_mgmt:             bool
			vlan_id:             number
			vnic_networks: [{
				ctlr_alloc: bool
				ip: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				mode: string
			}, ...]
			vrf_ref: string
		}, ...]
		vnic_networks: [{
			ctlr_alloc: bool
			ip: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			mode: string
		}, ...]
		vrf_id:  number
		vrf_ref: string
	}, ...]
	name?: string
	resources?: [{
		cores_per_socket: number
		disk:             number
		hyper_threading:  bool
		memory:           number
		num_vcpus:        number
		sockets:          number
	}, ...]
	se_group_ref?: string
	tenant_ref?:   string
	uuid?:         string
}
#AviServiceenginegroupDataSource: {
	accelerated_networking?:       bool
	active_standby?:               bool
	aggressive_failure_detection?: bool
	algo?:                         string
	allow_burst?:                  bool
	app_cache_percent?:            number
	app_learning_memory_percent?:  number
	archive_shm_limit?:            number
	async_ssl?:                    bool
	async_ssl_threads?:            number
	auto_rebalance?:               bool
	auto_rebalance_capacity_per_se?: [number, ...]
	auto_rebalance_criteria?: [string, ...]
	auto_rebalance_interval?:               number
	auto_redistribute_active_standby_load?: bool
	bgp_state_update_interval?:             number
	buffer_se?:                             number
	cloud_ref?:                             string
	compress_ip_rules_for_each_ns_subnet?:  bool
	config_debugs_on_all_cores?:            bool
	connection_memory_percentage?:          number
	core_shm_app_cache?:                    bool
	core_shm_app_learning?:                 bool
	cpu_reserve?:                           bool
	cpu_socket_affinity?:                   bool
	custom_securitygroups_data?: [string, ...]
	custom_securitygroups_mgmt?: [string, ...]
	custom_tag?: [{
		tag_key: string
		tag_val: string
	}, ...]
	data_network_id?:                 string
	datascript_timeout?:              number
	dedicated_dispatcher_core?:       bool
	description?:                     string
	disable_avi_securitygroups?:      bool
	disable_csum_offloads?:           bool
	disable_gro?:                     bool
	disable_se_memory_check?:         bool
	disable_tso?:                     bool
	disk_per_se?:                     number
	distribute_load_active_standby?:  bool
	distribute_queues?:               bool
	distribute_vnics?:                bool
	enable_gratarp_permanent?:        bool
	enable_hsm_priming?:              bool
	enable_multi_lb?:                 bool
	enable_pcap_tx_ring?:             bool
	ephemeral_portrange_end?:         number
	ephemeral_portrange_start?:       number
	extra_config_multiplier?:         number
	extra_shared_config_memory?:      number
	flow_table_new_syn_max_entries?:  number
	free_list_size?:                  number
	gratarp_permanent_periodicity?:   number
	ha_mode?:                         string
	hardwaresecuritymodulegroup_ref?: string
	heap_minimum_config_memory?:      number
	hm_on_standby?:                   bool
	host_attribute_key?:              string
	host_attribute_value?:            string
	host_gateway_monitor?:            bool
	hypervisor?:                      string
	id?:                              string
	ignore_rtt_threshold?:            number
	ingress_access_data?:             string
	ingress_access_mgmt?:             string
	instance_flavor?:                 string
	iptables?: [{
		chain: string
		rules: [{
			action: string
			dnat_ip: [{
				addr: string
				type: string
			}, ...]
			dst_ip: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			dst_port: [{
				end:   number
				start: number
			}, ...]
			input_interface:  string
			output_interface: string
			proto:            string
			src_ip: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			src_port: [{
				end:   number
				start: number
			}, ...]
			tag: string
		}, ...]
		table: string
	}, ...]
	least_load_core_selection?:  bool
	license_tier?:               string
	license_type?:               string
	log_disksz?:                 number
	max_concurrent_external_hm?: number
	max_cpu_usage?:              number
	max_memory_per_mempool?:     number
	max_public_ips_per_lb?:      number
	max_queues_per_vnic?:        number
	max_rules_per_lb?:           number
	max_scaleout_per_vs?:        number
	max_se?:                     number
	max_vs_per_se?:              number
	mem_reserve?:                bool
	memory_for_config_update?:   number
	memory_per_se?:              number
	mgmt_network_ref?:           string
	mgmt_subnet?: [{
		ip_addr: [{
			addr: string
			type: string
		}, ...]
		mask: number
	}, ...]
	min_cpu_usage?:                        number
	min_scaleout_per_vs?:                  number
	min_se?:                               number
	minimum_connection_memory?:            number
	n_log_streaming_threads?:              number
	name?:                                 string
	non_significant_log_throttle?:         number
	num_dispatcher_cores?:                 number
	num_flow_cores_sum_changes_to_ignore?: number
	openstack_availability_zones?: [string, ...]
	openstack_mgmt_network_name?: string
	openstack_mgmt_network_uuid?: string
	os_reserved_memory?:          number
	pcap_tx_mode?:                string
	per_app?:                     bool
	placement_mode?:              string
	realtime_se_metrics?: [{
		duration: number
		enabled:  bool
	}, ...]
	reboot_on_panic?:      bool
	se_bandwidth_type?:    string
	se_deprovision_delay?: number
	se_dos_profile?: [{
		thresh_info: [{
			attack:    string
			max_value: number
			min_value: number
		}, ...]
		thresh_period: number
	}, ...]
	se_dp_vnic_queue_stall_event_sleep?:      number
	se_dp_vnic_queue_stall_threshold?:        number
	se_dp_vnic_queue_stall_timeout?:          number
	se_dp_vnic_restart_on_queue_stall_count?: number
	se_dp_vnic_stall_se_restart_window?:      number
	se_dpdk_pmd?:                             number
	se_flow_probe_retries?:                   number
	se_flow_probe_retry_timer?:               number
	se_ipc_udp_port?:                         number
	se_kni_burst_factor?:                     number
	se_lro?:                                  bool
	se_mtu?:                                  number
	se_name_prefix?:                          string
	se_pcap_lookahead?:                       bool
	se_pcap_pkt_count?:                       number
	se_pcap_pkt_sz?:                          number
	se_pcap_qdisc_bypass?:                    bool
	se_pcap_reinit_frequency?:                number
	se_pcap_reinit_threshold?:                number
	se_probe_port?:                           number
	se_remote_punt_udp_port?:                 number
	se_rl_prop?: [{
		msf_num_stages: number
		msf_stage_size: number
	}, ...]
	se_rum_sampling_nav_interval?: number
	se_rum_sampling_nav_percent?:  number
	se_rum_sampling_res_interval?: number
	se_rum_sampling_res_percent?:  number
	se_sb_dedicated_core?:         bool
	se_sb_threads?:                number
	se_thread_multiplier?:         number
	se_tracert_port_range?: [{
		end:   number
		start: number
	}, ...]
	se_tunnel_mode?:             number
	se_tunnel_udp_port?:         number
	se_tx_batch_size?:           number
	se_udp_encap_ipc?:           number
	se_use_dpdk?:                number
	se_vs_hb_max_pkts_in_batch?: number
	se_vs_hb_max_vs_in_pkt?:     number
	self_se_election?:           bool
	service_ip6_subnets?: [{
		ip_addr: [{
			addr: string
			type: string
		}, ...]
		mask: number
	}, ...]
	service_ip_subnets?: [{
		ip_addr: [{
			addr: string
			type: string
		}, ...]
		mask: number
	}, ...]
	shm_minimum_config_memory?:   number
	significant_log_throttle?:    number
	ssl_preprocess_sni_hostname?: bool
	tenant_ref?:                  string
	udf_log_throttle?:            number
	use_standard_alb?:            bool
	uuid?:                        string
	vcenter_clusters?: [{
		cluster_refs: [string, ...]
		include: bool
	}, ...]
	vcenter_datastore_mode?: string
	vcenter_datastores?: [{
		datastore_name: string
	}, ...]
	vcenter_datastores_include?: bool
	vcenter_folder?:             string
	vcenter_hosts?: [{
		host_refs: [string, ...]
		include: bool
	}, ...]
	vcpus_per_se?: number
	vip_asg?: [{
		configuration: [{
			zones: [{
				subnet_uuid: string
			}, ...]
		}, ...]
		policy: [{
			dns_cooldown: number
			max_size:     number
			min_size:     number
			suspend:      bool
		}, ...]
	}, ...]
	vs_host_redundancy?:                  bool
	vs_scalein_timeout?:                  number
	vs_scalein_timeout_for_upgrade?:      number
	vs_scaleout_timeout?:                 number
	vs_se_scaleout_additional_wait_time?: number
	vs_se_scaleout_ready_timeout?:        number
	vs_switchover_timeout?:               number
	vss_placement?: [{
		core_nonaffinity: number
		num_subcores:     number
	}, ...]
	vss_placement_enabled?: bool
	waf_mempool?:           bool
	waf_mempool_size?:      number
}
#AviSnmptrapprofileDataSource: {
	id?:         string
	name?:       string
	tenant_ref?: string
	trap_servers?: [{
		community: string
		ip_addr: [{
			addr: string
			type: string
		}, ...]
		port: number
		user: [{
			auth_passphrase: string
			auth_type:       string
			priv_passphrase: string
			priv_type:       string
			username:        string
		}, ...]
		version: string
	}, ...]
	uuid?: string
}
#AviSslkeyandcertificateDataSource: {
	ca_certs?: [{
		ca_ref: string
		name:   string
	}, ...]
	certificate?: [{
		certificate:                 string
		certificate_signing_request: string
		chain_verified:              bool
		days_until_expire:           number
		expiry_status:               string
		fingerprint:                 string
		issuer: [{
			common_name:        string
			country:            string
			distinguished_name: string
			email_address:      string
			locality:           string
			organization:       string
			organization_unit:  string
			state:              string
		}, ...]
		key_params: [{
			algorithm: string
			ec_params: [{
				curve: string
			}, ...]
			rsa_params: [{
				exponent: number
				key_size: string
			}, ...]
		}, ...]
		not_after:           string
		not_before:          string
		public_key:          string
		self_signed:         bool
		serial_number:       string
		signature:           string
		signature_algorithm: string
		subject: [{
			common_name:        string
			country:            string
			distinguished_name: string
			email_address:      string
			locality:           string
			organization:       string
			organization_unit:  string
			state:              string
		}, ...]
		subject_alt_names: [string, ...]
		text:    string
		version: string
	}, ...]
	certificate_base64?:                 bool
	certificate_management_profile_ref?: string
	created_by?:                         string
	dynamic_params?: [{
		is_dynamic:   bool
		is_sensitive: bool
		name:         string
		value:        string
	}, ...]
	enckey_base64?:                   string
	enckey_name?:                     string
	format?:                          string
	hardwaresecuritymodulegroup_ref?: string
	id?:                              string
	key?:                             string
	key_base64?:                      bool
	key_params?: [{
		algorithm: string
		ec_params: [{
			curve: string
		}, ...]
		rsa_params: [{
			exponent: number
			key_size: string
		}, ...]
	}, ...]
	key_passphrase?: string
	name?:           string
	status?:         string
	tenant_ref?:     string
	type?:           string
	uuid?:           string
}
#AviSslprofileDataSource: {
	accepted_ciphers?: string
	accepted_versions?: [{
		type: string
	}, ...]
	cipher_enums?: [string, ...]
	ciphersuites?:                  string
	description?:                   string
	dhparam?:                       string
	enable_early_data?:             bool
	enable_ssl_session_reuse?:      bool
	id?:                            string
	name?:                          string
	prefer_client_cipher_ordering?: bool
	send_close_notify?:             bool
	ssl_rating?: [{
		compatibility_rating: string
		performance_rating:   string
		security_score:       string
	}, ...]
	ssl_session_timeout?: number
	tags?: [{
		type:  string
		value: string
	}, ...]
	tenant_ref?: string
	type?:       string
	uuid?:       string
}
#AviSsopolicyDataSource: {
	authentication_policy?: [{
		authn_rules: [{
			action: [{
				type: string
			}, ...]
			enable: bool
			index:  number
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
			}, ...]
			name: string
		}, ...]
		default_auth_profile_ref: string
	}, ...]
	authorization_policy?: [{
		authz_rules: [{
			action: [{
				status_code: string
				type:        string
			}, ...]
			enable: bool
			index:  number
			match: [{
				attr_matches: [{
					attribute_name: string
					attribute_value_list: [{
						match_criteria: string
						match_str: [string, ...]
						string_group_refs: [string, ...]
					}, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				method: [{
					match_criteria: string
					methods: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	type?:       string
	uuid?:       string
}
#AviStringgroupDataSource: {
	description?: string
	id?:          string
	kv?: [{
		key:   string
		value: string
	}, ...]
	longest_match?: bool
	name?:          string
	tenant_ref?:    string
	type?:          string
	uuid?:          string
}
#AviSystemconfigurationDataSource: {
	admin_auth_configuration?: [{
		allow_local_user_login: bool
		auth_profile_ref:       string
		mapping_rules: [{
			assign_policy: string
			assign_role:   string
			assign_tenant: string
			attribute_match: [{
				criteria: string
				name:     string
				values: [string, ...]
			}, ...]
			group_match: [{
				criteria: string
				groups: [string, ...]
			}, ...]
			index:        number
			is_superuser: bool
			object_access_policy_refs: [string, ...]
			policy_attribute_name: string
			role_attribute_name:   string
			role_refs: [string, ...]
			tenant_attribute_name: string
			tenant_refs: [string, ...]
		}, ...]
	}, ...]
	default_license_tier?: string
	dns_configuration?: [{
		search_domain: string
		server_list: [{
			addr: string
			type: string
		}, ...]
	}, ...]
	dns_virtualservice_refs?: [string, ...]
	docker_mode?: bool
	email_configuration?: [{
		auth_password:    string
		auth_username:    string
		disable_tls:      bool
		from_email:       string
		mail_server_name: string
		mail_server_port: number
		smtp_type:        string
	}, ...]
	global_tenant_config?: [{
		se_in_provider_context:       bool
		tenant_access_to_provider_se: bool
		tenant_vrf:                   bool
	}, ...]
	id?: string
	linux_configuration?: [{
		banner:   string
		cis_mode: bool
		motd:     string
	}, ...]
	mgmt_ip_access_control?: [{
		api_access: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
		shell_server_access: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
		snmp_access: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
		ssh_access: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
		sysint_access: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
	}, ...]
	ntp_configuration?: [{
		ntp_authentication_keys: [{
			algorithm:  string
			key:        string
			key_number: number
		}, ...]
		ntp_server_list: [{
			addr: string
			type: string
		}, ...]
		ntp_servers: [{
			key_number: number
			server: [{
				addr: string
				type: string
			}, ...]
		}, ...]
	}, ...]
	portal_configuration?: [{
		allow_basic_authentication:     bool
		api_force_timeout:              number
		disable_remote_cli_shell:       bool
		disable_swagger:                bool
		enable_clickjacking_protection: bool
		enable_http:                    bool
		enable_https:                   bool
		http_port:                      number
		https_port:                     number
		password_strength_check:        bool
		redirect_to_https:              bool
		sslkeyandcertificate_refs: [string, ...]
		sslprofile_ref:      string
		use_uuid_from_input: bool
	}, ...]
	proxy_configuration?: [{
		host:     string
		password: string
		port:     number
		username: string
	}, ...]
	secure_channel_configuration?: [{
		sslkeyandcertificate_refs: [string, ...]
	}, ...]
	snmp_configuration?: [{
		community:          string
		large_trap_payload: bool
		snmp_v3_config: [{
			engine_id: string
			user: [{
				auth_passphrase: string
				auth_type:       string
				priv_passphrase: string
				priv_type:       string
				username:        string
			}, ...]
		}, ...]
		sys_contact:  string
		sys_location: string
		version:      string
	}, ...]
	ssh_ciphers?: [string, ...]
	ssh_hmacs?: [string, ...]
	uuid?:                      string
	welcome_workflow_complete?: bool
}
#AviTenantDataSource: {
	config_settings?: [{
		se_in_provider_context:       bool
		tenant_access_to_provider_se: bool
		tenant_vrf:                   bool
	}, ...]
	created_by?:  string
	description?: string
	id?:          string
	local?:       bool
	name?:        string
	uuid?:        string
}
#AviTestsedatastorelevel1DataSource: {
	id?:                            string
	name?:                          string
	tenant_ref?:                    string
	test_se_datastore_level_2_ref?: string
	uuid?:                          string
}
#AviTestsedatastorelevel2DataSource: {
	id?:         string
	name?:       string
	tenant_ref?: string
	test_se_datastore_level_3_refs?: [string, ...]
	uuid?: string
}
#AviTestsedatastorelevel3DataSource: {
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviTrafficcloneprofileDataSource: {
	clone_servers?: [{
		ip_address: [{
			addr: string
			type: string
		}, ...]
		mac:         string
		network_ref: string
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
	}, ...]
	cloud_ref?:          string
	id?:                 string
	name?:               string
	preserve_client_ip?: bool
	tenant_ref?:         string
	uuid?:               string
}
#AviUpgradestatusinfoDataSource: {
	duration?:              number
	enable_patch_rollback?: bool
	enable_rollback?:       bool
	end_time?:              string
	enqueue_time?:          string
	id?:                    string
	image_ref?:             string
	name?:                  string
	node_type?:             string
	obj_cloud_ref?:         string
	params?: [{
		image_ref: string
		patch_ref: string
		se_group_options: [{
			action_on_error: string
			disruptive:      bool
		}, ...]
		se_group_resume_options: [{
			action_on_error: string
			disruptive:      bool
			skip_suspended:  bool
		}, ...]
	}, ...]
	patch_image_ref?: string
	patch_list?: [{
		patch_image_ref: string
		patch_version:   string
	}, ...]
	patch_version?:            string
	previous_image_ref?:       string
	previous_patch_image_ref?: string
	previous_patch_list?: [{
		patch_image_ref: string
		patch_version:   string
	}, ...]
	previous_patch_version?: string
	previous_version?:       string
	progress?:               number
	se_upgrade_events?: [{
		from_se_ref:  string
		num_se:       number
		num_se_group: number
		num_vs:       number
		reason: [string, ...]
		se_group_ha_mode: string
		se_group_ref:     string
		se_ref:           string
		task:             string
		to_se_ref:        string
		traffic_status:   string
		vs_ref:           string
	}, ...]
	seg_status?: [{
		controller_version: string
		disrupted_vs_ref: [string, ...]
		duration:     string
		end_time:     string
		enqueue_time: string
		ha_mode:      string
		in_progress:  bool
		notes: [string, ...]
		num_se:                       number
		num_se_with_no_vs:            number
		num_se_with_vs_not_scaledout: number
		num_se_with_vs_scaledout:     number
		num_vs:                       number
		num_vs_disrupted:             number
		progress:                     number
		reason: [string, ...]
		request_time: string
		se_already_upgraded_at_start: [string, ...]
		se_disconnected_at_start: [string, ...]
		se_group_name: string
		se_group_uuid: string
		se_ip_missing_at_start: [string, ...]
		se_poweredoff_at_start: [string, ...]
		se_reboot_in_progress_ref: string
		se_upgrade_completed: [string, ...]
		se_upgrade_errors: [{
			from_se_ref:  string
			num_se:       number
			num_se_group: number
			num_vs:       number
			reason: [string, ...]
			se_group_ha_mode: string
			se_group_ref:     string
			se_ref:           string
			task:             string
			to_se_ref:        string
			traffic_status:   string
			vs_ref:           string
		}, ...]
		se_upgrade_failed: [string, ...]
		se_upgrade_in_progress: [string, ...]
		se_upgrade_not_started: [string, ...]
		se_upgrade_skip_suspended: [string, ...]
		se_upgrade_suspended: [string, ...]
		se_with_no_vs: [string, ...]
		se_with_vs_not_scaledout: [string, ...]
		se_with_vs_scaledout: [string, ...]
		start_time:     string
		state:          string
		tenant_ref:     string
		thread:         string
		traffic_status: string
		vs_errors: [{
			reason: [string, ...]
			se_group_ha_mode: string
			se_group_ref:     string
			tenant_ref:       string
			traffic_status:   string
			vip_id:           string
			vs_ref:           string
		}, ...]
		vs_migrate_in_progress_ref: [string, ...]
		vs_scalein_in_progress_ref: [string, ...]
		vs_scaleout_in_progress_ref: [string, ...]
		worker: string
	}, ...]
	start_time?: string
	state?: [{
		last_changed_time: [{
			secs:  number
			usecs: number
		}, ...]
		reason: string
		state:  string
	}, ...]
	system?:          bool
	tasks_completed?: number
	tenant_ref?:      string
	total_tasks?:     number
	upgrade_events?: [{
		nodes_events: [{
			duration: number
			end_time: string
			ip: [{
				addr: string
				type: string
			}, ...]
			message:    string
			start_time: string
			status:     bool
			sub_tasks: [string, ...]
		}, ...]
		task: string
	}, ...]
	upgrade_ops?: string
	uuid?:        string
	version?:     string
}
#AviUpgradestatussummaryDataSource: {
	enable_patch_rollback?: bool
	enable_rollback?:       bool
	end_time?:              string
	id?:                    string
	image_ref?:             string
	name?:                  string
	node_type?:             string
	obj_cloud_ref?:         string
	patch_image_ref?:       string
	start_time?:            string
	state?: [{
		last_changed_time: [{
			secs:  number
			usecs: number
		}, ...]
		reason: string
		state:  string
	}, ...]
	tasks_completed?: number
	tenant_ref?:      string
	total_tasks?:     number
	upgrade_ops?:     string
	uuid?:            string
	version?:         string
}
#AviUseraccountprofileDataSource: {
	account_lock_timeout?:          number
	credentials_timeout_threshold?: number
	id?:                            string
	max_concurrent_sessions?:       number
	max_login_failure_count?:       number
	max_password_history_count?:    number
	name?:                          string
	uuid?:                          string
}
#AviVirtualserviceDataSource: {
	active_standby_se_tag?:     string
	allow_invalid_client_cert?: bool
	analytics_policy?: [{
		all_headers:     bool
		client_insights: string
		client_insights_sampling: [{
			client_ip: [{
				addrs: [{
					addr: string
					type: string
				}, ...]
				group_refs: [string, ...]
				match_criteria: string
				prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
			sample_uris: [{
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
			skip_uris: [{
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
		}, ...]
		client_log_filters: [{
			all_headers: bool
			client_ip: [{
				addrs: [{
					addr: string
					type: string
				}, ...]
				group_refs: [string, ...]
				match_criteria: string
				prefixes: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				ranges: [{
					begin: [{
						addr: string
						type: string
					}, ...]
					end: [{
						addr: string
						type: string
					}, ...]
				}, ...]
			}, ...]
			duration: number
			enabled:  bool
			index:    number
			name:     string
			uri: [{
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
		}, ...]
		full_client_logs: [{
			duration: number
			enabled:  bool
			throttle: number
		}, ...]
		metrics_realtime_update: [{
			duration: number
			enabled:  bool
		}, ...]
		significant_log_throttle: number
		udf_log_throttle:         number
	}, ...]
	analytics_profile_ref?:   string
	apic_contract_graph?:     string
	application_profile_ref?: string
	bulk_sync_kvcache?:       bool
	client_auth?: [{
		auth_profile_ref: string
		realm:            string
		request_uri_path: [{
			match_criteria: string
			match_str: [string, ...]
			string_group_refs: [string, ...]
		}, ...]
		type: string
	}, ...]
	close_client_conn_on_config_update?: bool
	cloud_config_cksum?:                 string
	cloud_ref?:                          string
	cloud_type?:                         string
	connections_rate_limit?: [{
		action: [{
			file: [{
				content_type: string
				file_content: string
			}, ...]
			redirect: [{
				host: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				keep_query: bool
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				port:        number
				protocol:    string
				status_code: string
			}, ...]
			status_code: string
			type:        string
		}, ...]
		explicit_tracking: bool
		fine_grain:        bool
		http_cookie:       string
		http_header:       string
		rate_limiter: [{
			burst_sz: number
			count:    number
			name:     string
			period:   number
		}, ...]
	}, ...]
	content_rewrite?: [{
		req_match_replace_pair: [{
			match_string: string
			replacement_string: [{
				type: string
				val:  string
			}, ...]
		}, ...]
		request_rewrite_enabled:  bool
		response_rewrite_enabled: bool
		rewritable_content_ref:   string
		rsp_match_replace_pair: [{
			match_string: string
			replacement_string: [{
				type: string
				val:  string
			}, ...]
		}, ...]
	}, ...]
	created_by?:     string
	delay_fairness?: bool
	description?:    string
	dns_info?: [{
		algorithm: string
		cname: [{
			cname: string
		}, ...]
		fqdn:                    string
		num_records_in_response: number
		ttl:                     number
		type:                    string
	}, ...]
	dns_policies?: [{
		dns_policy_ref: string
		index:          number
	}, ...]
	east_west_placement?:    bool
	enable_autogw?:          bool
	enable_rhi?:             bool
	enable_rhi_snat?:        bool
	enabled?:                bool
	error_page_profile_ref?: string
	flow_dist?:              string
	flow_label_type?:        string
	fqdn?:                   string
	host_name_xlate?:        string
	http_policies?: [{
		http_policy_set_ref: string
		index:               number
	}, ...]
	id?:                 string
	ign_pool_net_reach?: bool
	l4_policies?: [{
		index:             number
		l4_policy_set_ref: string
	}, ...]
	limit_doser?:                 bool
	max_cps_per_client?:          number
	microservice_ref?:            string
	min_pools_up?:                number
	name?:                        string
	network_profile_ref?:         string
	network_security_policy_ref?: string
	nsx_securitygroup?: [string, ...]
	performance_limits?: [{
		max_concurrent_connections: number
		max_throughput:             number
	}, ...]
	pool_group_ref?:                   string
	pool_ref?:                         string
	remove_listening_port_on_vs_down?: bool
	requests_rate_limit?: [{
		action: [{
			file: [{
				content_type: string
				file_content: string
			}, ...]
			redirect: [{
				host: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				keep_query: bool
				path: [{
					tokens: [{
						end_index:   number
						start_index: number
						str_value:   string
						type:        string
					}, ...]
					type: string
				}, ...]
				port:        number
				protocol:    string
				status_code: string
			}, ...]
			status_code: string
			type:        string
		}, ...]
		explicit_tracking: bool
		fine_grain:        bool
		http_cookie:       string
		http_header:       string
		rate_limiter: [{
			burst_sz: number
			count:    number
			name:     string
			period:   number
		}, ...]
	}, ...]
	saml_sp_config?: [{
		cookie_name:    string
		cookie_timeout: number
		entity_id:      string
		key: [{
			aes_key:  string
			hmac_key: string
			name:     string
		}, ...]
		signing_ssl_key_and_certificate_ref: string
		single_signon_url:                   string
	}, ...]
	scaleout_ecmp?:              bool
	se_group_ref?:               string
	security_policy_ref?:        string
	server_network_profile_ref?: string
	service_metadata?:           string
	service_pool_select?: [{
		service_pool_group_ref: string
		service_pool_ref:       string
		service_port:           number
		service_port_range_end: number
		service_protocol:       string
	}, ...]
	services?: [{
		enable_ssl:                       bool
		override_application_profile_ref: string
		override_network_profile_ref:     string
		port:                             number
		port_range_end:                   number
	}, ...]
	sideband_profile?: [{
		ip: [{
			addr: string
			type: string
		}, ...]
		sideband_max_request_body_size: number
	}, ...]
	snat_ip?: [{
		addr: string
		type: string
	}, ...]
	ssl_key_and_certificate_refs?: [string, ...]
	ssl_profile_ref?: string
	ssl_profile_selectors?: [{
		client_ip_list: [{
			addrs: [{
				addr: string
				type: string
			}, ...]
			group_refs: [string, ...]
			match_criteria: string
			prefixes: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			ranges: [{
				begin: [{
					addr: string
					type: string
				}, ...]
				end: [{
					addr: string
					type: string
				}, ...]
			}, ...]
		}, ...]
		ssl_profile_ref: string
	}, ...]
	ssl_sess_cache_avg_size?: number
	sso_policy_ref?:          string
	static_dns_records?: [{
		algorithm: string
		cname: [{
			cname: string
		}, ...]
		delegated:   bool
		description: string
		fqdn: [string, ...]
		ip6_address: [{
			ip6_address: [{
				addr: string
				type: string
			}, ...]
		}, ...]
		ip_address: [{
			ip_address: [{
				addr: string
				type: string
			}, ...]
		}, ...]
		metadata: string
		mx_records: [{
			host:     string
			priority: number
		}, ...]
		ns: [{
			ip6_address: [{
				addr: string
				type: string
			}, ...]
			ip_address: [{
				addr: string
				type: string
			}, ...]
			nsname: string
		}, ...]
		num_records_in_response: number
		service_locator: [{
			port:     number
			priority: number
			target:   string
			weight:   number
		}, ...]
		ttl: number
		txt_records: [{
			text_str: string
		}, ...]
		type:           string
		wildcard_match: bool
	}, ...]
	tenant_ref?:                    string
	test_se_datastore_level_1_ref?: string
	topology_policies?: [{
		dns_policy_ref: string
		index:          number
	}, ...]
	traffic_clone_profile_ref?: string
	traffic_enabled?:           bool
	type?:                      string
	use_bridge_ip_as_vip?:      bool
	use_vip_as_snat?:           bool
	uuid?:                      string
	vh_domain_name?: [string, ...]
	vh_parent_vs_uuid?: string
	vip?: [{
		auto_allocate_floating_ip: bool
		auto_allocate_ip:          bool
		auto_allocate_ip_type:     string
		availability_zone:         string
		avi_allocated_fip:         bool
		avi_allocated_vip:         bool
		discovered_networks: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		enabled: bool
		floating_ip: [{
			addr: string
			type: string
		}, ...]
		floating_ip6: [{
			addr: string
			type: string
		}, ...]
		floating_subnet6_uuid: string
		floating_subnet_uuid:  string
		ip6_address: [{
			addr: string
			type: string
		}, ...]
		ip_address: [{
			addr: string
			type: string
		}, ...]
		ipam_network_subnet: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6_uuid: string
			subnet_uuid:  string
		}, ...]
		network_ref: string
		placement_networks: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		port_uuid: string
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		subnet6: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		subnet6_uuid: string
		subnet_uuid:  string
		vip_id:       string
	}, ...]
	vrf_context_ref?: string
	vs_datascripts?: [{
		index:                 number
		vs_datascript_set_ref: string
	}, ...]
	vsvip_cloud_config_cksum?: string
	vsvip_ref?:                string
	waf_policy_ref?:           string
	weight?:                   number
}
#AviVrfcontextDataSource: {
	bgp_profile?: [{
		community: [string, ...]
		hold_time: number
		ibgp:      bool
		ip_communities: [{
			community: [string, ...]
			ip_begin: [{
				addr: string
				type: string
			}, ...]
			ip_end: [{
				addr: string
				type: string
			}, ...]
		}, ...]
		keepalive_interval: number
		local_as:           number
		peers: [{
			advertise_snat_ip:      bool
			advertise_vip:          bool
			advertisement_interval: number
			bfd:                    bool
			connect_timer:          number
			ebgp_multihop:          number
			hold_time:              number
			keepalive_interval:     number
			local_as:               number
			md5_secret:             string
			network_ref:            string
			peer_ip: [{
				addr: string
				type: string
			}, ...]
			peer_ip6: [{
				addr: string
				type: string
			}, ...]
			remote_as: number
			shutdown:  bool
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		send_community: bool
		shutdown:       bool
	}, ...]
	cloud_ref?: string
	debugvrfcontext?: [{
		command_buffer_interval: number
		command_buffer_size:     number
		flags: [{
			flag: string
		}, ...]
	}, ...]
	description?: string
	gateway_mon?: [{
		gateway_ip: [{
			addr: string
			type: string
		}, ...]
		gateway_monitor_fail_threshold:    number
		gateway_monitor_interval:          number
		gateway_monitor_success_threshold: number
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
	}, ...]
	id?: string
	internal_gateway_monitor?: [{
		disable_gateway_monitor:           bool
		gateway_monitor_failure_threshold: number
		gateway_monitor_interval:          number
		gateway_monitor_success_threshold: number
	}, ...]
	labels?: [{
		key:   string
		value: string
	}, ...]
	name?: string
	static_routes?: [{
		disable_gateway_monitor: bool
		if_name:                 string
		next_hop: [{
			addr: string
			type: string
		}, ...]
		prefix: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		route_id: string
	}, ...]
	system_default?: bool
	tenant_ref?:     string
	uuid?:           string
}
#AviVsdatascriptsetDataSource: {
	created_by?: string
	datascript?: [{
		evt:    string
		script: string
	}, ...]
	description?: string
	id?:          string
	ipgroup_refs?: [string, ...]
	name?: string
	pool_group_refs?: [string, ...]
	pool_refs?: [string, ...]
	protocol_parser_refs?: [string, ...]
	rate_limiters?: [{
		burst_sz: number
		count:    number
		name:     string
		period:   number
	}, ...]
	string_group_refs?: [string, ...]
	tenant_ref?: string
	uuid?:       string
}
#AviVsvipDataSource: {
	cloud_ref?: string
	dns_info?: [{
		algorithm: string
		cname: [{
			cname: string
		}, ...]
		fqdn:                    string
		num_records_in_response: number
		ttl:                     number
		type:                    string
	}, ...]
	east_west_placement?: bool
	id?:                  string
	name?:                string
	tenant_ref?:          string
	use_standard_alb?:    bool
	uuid?:                string
	vip?: [{
		auto_allocate_floating_ip: bool
		auto_allocate_ip:          bool
		auto_allocate_ip_type:     string
		availability_zone:         string
		avi_allocated_fip:         bool
		avi_allocated_vip:         bool
		discovered_networks: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		enabled: bool
		floating_ip: [{
			addr: string
			type: string
		}, ...]
		floating_ip6: [{
			addr: string
			type: string
		}, ...]
		floating_subnet6_uuid: string
		floating_subnet_uuid:  string
		ip6_address: [{
			addr: string
			type: string
		}, ...]
		ip_address: [{
			addr: string
			type: string
		}, ...]
		ipam_network_subnet: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6_uuid: string
			subnet_uuid:  string
		}, ...]
		network_ref: string
		placement_networks: [{
			network_ref: string
			subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			subnet6: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
		}, ...]
		port_uuid: string
		subnet: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		subnet6: [{
			ip_addr: [{
				addr: string
				type: string
			}, ...]
			mask: number
		}, ...]
		subnet6_uuid: string
		subnet_uuid:  string
		vip_id:       string
	}, ...]
	vrf_context_ref?:          string
	vsvip_cloud_config_cksum?: string
}
#AviWafcrsDataSource: {
	description?: string
	groups?: [{
		enable: bool
		exclude_list: [{
			client_subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			description:   string
			match_element: string
			match_element_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_match_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_path: string
		}, ...]
		index: number
		name:  string
		rules: [{
			enable: bool
			exclude_list: [{
				client_subnet: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				description:   string
				match_element: string
				match_element_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_match_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_path: string
			}, ...]
			index:   number
			mode:    string
			name:    string
			rule:    string
			rule_id: string
			tags: [string, ...]
		}, ...]
	}, ...]
	id?:           string
	integrity?:    string
	name?:         string
	release_date?: string
	tenant_ref?:   string
	uuid?:         string
	version?:      string
}
#AviWafpolicyDataSource: {
	allow_mode_delegation?: bool
	created_by?:            string
	crs_groups?: [{
		enable: bool
		exclude_list: [{
			client_subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			description:   string
			match_element: string
			match_element_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_match_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_path: string
		}, ...]
		index: number
		name:  string
		rules: [{
			enable: bool
			exclude_list: [{
				client_subnet: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				description:   string
				match_element: string
				match_element_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_match_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_path: string
			}, ...]
			index:   number
			mode:    string
			name:    string
			rule:    string
			rule_id: string
			tags: [string, ...]
		}, ...]
	}, ...]
	description?:         string
	enable_app_learning?: bool
	failure_mode?:        string
	id?:                  string
	mode?:                string
	name?:                string
	paranoia_level?:      string
	positive_security_model?: [{
		group_refs: [string, ...]
	}, ...]
	post_crs_groups?: [{
		enable: bool
		exclude_list: [{
			client_subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			description:   string
			match_element: string
			match_element_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_match_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_path: string
		}, ...]
		index: number
		name:  string
		rules: [{
			enable: bool
			exclude_list: [{
				client_subnet: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				description:   string
				match_element: string
				match_element_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_match_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_path: string
			}, ...]
			index:   number
			mode:    string
			name:    string
			rule:    string
			rule_id: string
			tags: [string, ...]
		}, ...]
	}, ...]
	pre_crs_groups?: [{
		enable: bool
		exclude_list: [{
			client_subnet: [{
				ip_addr: [{
					addr: string
					type: string
				}, ...]
				mask: number
			}, ...]
			description:   string
			match_element: string
			match_element_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_match_criteria: [{
				match_case: string
				match_op:   string
			}, ...]
			uri_path: string
		}, ...]
		index: number
		name:  string
		rules: [{
			enable: bool
			exclude_list: [{
				client_subnet: [{
					ip_addr: [{
						addr: string
						type: string
					}, ...]
					mask: number
				}, ...]
				description:   string
				match_element: string
				match_element_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_match_criteria: [{
					match_case: string
					match_op:   string
				}, ...]
				uri_path: string
			}, ...]
			index:   number
			mode:    string
			name:    string
			rule:    string
			rule_id: string
			tags: [string, ...]
		}, ...]
	}, ...]
	tenant_ref?:      string
	uuid?:            string
	waf_crs_ref?:     string
	waf_profile_ref?: string
	whitelist?: [{
		rules: [{
			actions: [string, ...]
			description: string
			enable:      bool
			index:       number
			match: [{
				client_ip: [{
					addrs: [{
						addr: string
						type: string
					}, ...]
					group_refs: [string, ...]
					match_criteria: string
					prefixes: [{
						ip_addr: [{
							addr: string
							type: string
						}, ...]
						mask: number
					}, ...]
					ranges: [{
						begin: [{
							addr: string
							type: string
						}, ...]
						end: [{
							addr: string
							type: string
						}, ...]
					}, ...]
				}, ...]
				cookie: [{
					match_case:     string
					match_criteria: string
					name:           string
					value:          string
				}, ...]
				hdrs: [{
					hdr:            string
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				host_hdr: [{
					match_case:     string
					match_criteria: string
					value: [string, ...]
				}, ...]
				method: [{
					match_criteria: string
					methods: [string, ...]
				}, ...]
				path: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				protocol: [{
					match_criteria: string
					protocols:      string
				}, ...]
				query: [{
					match_case:     string
					match_criteria: string
					match_str: [string, ...]
					string_group_refs: [string, ...]
				}, ...]
				version: [{
					match_criteria: string
					versions: [string, ...]
				}, ...]
				vs_port: [{
					match_criteria: string
					ports: [number, ...]
				}, ...]
			}, ...]
			name: string
		}, ...]
	}, ...]
}
#AviWafpolicypsmgroupDataSource: {
	description?:       string
	enable?:            bool
	hit_action?:        string
	id?:                string
	is_learning_group?: bool
	locations?: [{
		description: string
		index:       number
		match: [{
			host: [{
				match_case:     string
				match_criteria: string
				value: [string, ...]
			}, ...]
			methods: [{
				match_criteria: string
				methods: [string, ...]
			}, ...]
			path: [{
				match_case:     string
				match_criteria: string
				match_str: [string, ...]
				string_group_refs: [string, ...]
			}, ...]
		}, ...]
		name: string
		rules: [{
			description: string
			enable:      bool
			index:       number
			match_case:  string
			match_elements: [{
				excluded:    bool
				index:       number
				name:        string
				sub_element: string
			}, ...]
			match_value_max_length: number
			match_value_pattern:    string
			mode:                   string
			name:                   string
			paranoia_level:         string
			rule_id:                string
		}, ...]
	}, ...]
	miss_action?: string
	name?:        string
	tenant_ref?:  string
	uuid?:        string
}
#AviWafprofileDataSource: {
	config?: [{
		allowed_http_versions: [string, ...]
		allowed_methods: [string, ...]
		allowed_request_content_types: [string, ...]
		argument_separator:           string
		client_request_max_body_size: number
		confidence_override: [{
			confid_high_value:      number
			confid_low_value:       number
			confid_probable_value:  number
			confid_very_high_value: number
		}, ...]
		cookie_format_version:                number
		enable_auto_rule_updates:             bool
		ignore_incomplete_request_body_error: bool
		learning_params: [{
			enable_per_uri_learning: bool
			max_params:              number
			max_uris:                number
			min_hits_to_learn:       number
			sampling_percent:        number
			update_interval:         number
		}, ...]
		max_execution_time:           number
		min_confidence:               string
		regex_match_limit:            number
		regex_recursion_limit:        number
		request_body_default_action:  string
		request_hdr_default_action:   string
		response_body_default_action: string
		response_hdr_default_action:  string
		restricted_extensions: [string, ...]
		restricted_headers: [string, ...]
		server_response_max_body_size: number
		static_extensions: [string, ...]
		status_code_for_rejected_requests: string
	}, ...]
	description?: string
	files?: [{
		data: string
		name: string
	}, ...]
	id?:         string
	name?:       string
	tenant_ref?: string
	uuid?:       string
}
#AviWebhookDataSource: {
	callback_url?:       string
	description?:        string
	id?:                 string
	name?:               string
	tenant_ref?:         string
	uuid?:               string
	verification_token?: string
}
#DataSources: {
	avi_actiongroupconfig?: [_]:             #AviActiongroupconfigDataSource
	avi_alertconfig?: [_]:                   #AviAlertconfigDataSource
	avi_alertemailconfig?: [_]:              #AviAlertemailconfigDataSource
	avi_alertscriptconfig?: [_]:             #AviAlertscriptconfigDataSource
	avi_alertsyslogconfig?: [_]:             #AviAlertsyslogconfigDataSource
	avi_analyticsprofile?: [_]:              #AviAnalyticsprofileDataSource
	avi_applicationpersistenceprofile?: [_]: #AviApplicationpersistenceprofileDataSource
	avi_applicationprofile?: [_]:            #AviApplicationprofileDataSource
	avi_authprofile?: [_]:                   #AviAuthprofileDataSource
	avi_autoscalelaunchconfig?: [_]:         #AviAutoscalelaunchconfigDataSource
	avi_backup?: [_]:                        #AviBackupDataSource
	avi_backupconfiguration?: [_]:           #AviBackupconfigurationDataSource
	avi_certificatemanagementprofile?: [_]:  #AviCertificatemanagementprofileDataSource
	avi_cloud?: [_]:                         #AviCloudDataSource
	avi_cloudconnectoruser?: [_]:            #AviCloudconnectoruserDataSource
	avi_cloudproperties?: [_]:               #AviCloudpropertiesDataSource
	avi_cluster?: [_]:                       #AviClusterDataSource
	avi_clusterclouddetails?: [_]:           #AviClusterclouddetailsDataSource
	avi_controllerportalregistration?: [_]:  #AviControllerportalregistrationDataSource
	avi_controllerproperties?: [_]:          #AviControllerpropertiesDataSource
	avi_controllersite?: [_]:                #AviControllersiteDataSource
	avi_customerportalinfo?: [_]:            #AviCustomerportalinfoDataSource
	avi_customipamdnsprofile?: [_]:          #AviCustomipamdnsprofileDataSource
	avi_dnspolicy?: [_]:                     #AviDnspolicyDataSource
	avi_errorpagebody?: [_]:                 #AviErrorpagebodyDataSource
	avi_errorpageprofile?: [_]:              #AviErrorpageprofileDataSource
	avi_fileservice?: [_]:                   #AviFileserviceDataSource
	avi_gslb?: [_]:                          #AviGslbDataSource
	avi_gslbgeodbprofile?: [_]:              #AviGslbgeodbprofileDataSource
	avi_gslbservice?: [_]:                   #AviGslbserviceDataSource
	avi_hardwaresecuritymodulegroup?: [_]:   #AviHardwaresecuritymodulegroupDataSource
	avi_healthmonitor?: [_]:                 #AviHealthmonitorDataSource
	avi_httppolicyset?: [_]:                 #AviHttppolicysetDataSource
	avi_image?: [_]:                         #AviImageDataSource
	avi_ipaddrgroup?: [_]:                   #AviIpaddrgroupDataSource
	avi_ipamdnsproviderprofile?: [_]:        #AviIpamdnsproviderprofileDataSource
	avi_l4policyset?: [_]:                   #AviL4PolicysetDataSource
	avi_microservicegroup?: [_]:             #AviMicroservicegroupDataSource
	avi_natpolicy?: [_]:                     #AviNatpolicyDataSource
	avi_network?: [_]:                       #AviNetworkDataSource
	avi_networkprofile?: [_]:                #AviNetworkprofileDataSource
	avi_networksecuritypolicy?: [_]:         #AviNetworksecuritypolicyDataSource
	avi_networkservice?: [_]:                #AviNetworkserviceDataSource
	avi_objectaccesspolicy?: [_]:            #AviObjectaccesspolicyDataSource
	avi_pingaccessagent?: [_]:               #AviPingaccessagentDataSource
	avi_pkiprofile?: [_]:                    #AviPkiprofileDataSource
	avi_pool?: [_]:                          #AviPoolDataSource
	avi_poolgroup?: [_]:                     #AviPoolgroupDataSource
	avi_poolgroupdeploymentpolicy?: [_]:     #AviPoolgroupdeploymentpolicyDataSource
	avi_portalfileupload?: [_]:              #AviPortalfileuploadDataSource
	avi_prioritylabels?: [_]:                #AviPrioritylabelsDataSource
	avi_protocolparser?: [_]:                #AviProtocolparserDataSource
	avi_role?: [_]:                          #AviRoleDataSource
	avi_scheduler?: [_]:                     #AviSchedulerDataSource
	avi_securitypolicy?: [_]:                #AviSecuritypolicyDataSource
	avi_seproperties?: [_]:                  #AviSepropertiesDataSource
	avi_server?: [_]:                        #AviServerDataSource
	avi_serverautoscalepolicy?: [_]:         #AviServerautoscalepolicyDataSource
	avi_serviceengine?: [_]:                 #AviServiceengineDataSource
	avi_serviceenginegroup?: [_]:            #AviServiceenginegroupDataSource
	avi_snmptrapprofile?: [_]:               #AviSnmptrapprofileDataSource
	avi_sslkeyandcertificate?: [_]:          #AviSslkeyandcertificateDataSource
	avi_sslprofile?: [_]:                    #AviSslprofileDataSource
	avi_ssopolicy?: [_]:                     #AviSsopolicyDataSource
	avi_stringgroup?: [_]:                   #AviStringgroupDataSource
	avi_systemconfiguration?: [_]:           #AviSystemconfigurationDataSource
	avi_tenant?: [_]:                        #AviTenantDataSource
	avi_testsedatastorelevel1?: [_]:         #AviTestsedatastorelevel1DataSource
	avi_testsedatastorelevel2?: [_]:         #AviTestsedatastorelevel2DataSource
	avi_testsedatastorelevel3?: [_]:         #AviTestsedatastorelevel3DataSource
	avi_trafficcloneprofile?: [_]:           #AviTrafficcloneprofileDataSource
	avi_upgradestatusinfo?: [_]:             #AviUpgradestatusinfoDataSource
	avi_upgradestatussummary?: [_]:          #AviUpgradestatussummaryDataSource
	avi_useraccountprofile?: [_]:            #AviUseraccountprofileDataSource
	avi_virtualservice?: [_]:                #AviVirtualserviceDataSource
	avi_vrfcontext?: [_]:                    #AviVrfcontextDataSource
	avi_vsdatascriptset?: [_]:               #AviVsdatascriptsetDataSource
	avi_vsvip?: [_]:                         #AviVsvipDataSource
	avi_wafcrs?: [_]:                        #AviWafcrsDataSource
	avi_wafpolicy?: [_]:                     #AviWafpolicyDataSource
	avi_wafpolicypsmgroup?: [_]:             #AviWafpolicypsmgroupDataSource
	avi_wafprofile?: [_]:                    #AviWafprofileDataSource
	avi_webhook?: [_]:                       #AviWebhookDataSource
}
