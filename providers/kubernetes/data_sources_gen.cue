// Generated by cue-terraform-gen (https://github.com/tnarg/cue_terraform_gen). DO NOT EDIT.
package kubernetes

#KubernetesAllNamespacesDataSource: {
	id?: string
	namespaces?: [string, ...]
}
#KubernetesConfigMapDataSource: {
	binary_data?: [_]: string
	data?: [_]:        string
	id?: string
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesIngressDataSource: {
	id?: string
	load_balancer_ingress?: [{
		hostname: string
		ip:       string
	}, ...]
	spec?: [{
		backend: [{
			service_name: string
			service_port: string
		}, ...]
		rule: [{
			host: string
			http: [{
				path: [{
					backend: [{
						service_name: string
						service_port: string
					}, ...]
					path: string
				}, ...]
			}, ...]
		}, ...]
		tls: [{
			hosts: [string, ...]
			secret_name: string
		}, ...]
	}, ...]
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesNamespaceDataSource: {
	id?: string
	spec?: [{
		finalizers: [string, ...]
	}, ...]
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesPersistentVolumeClaimDataSource: {
	id?: string
	metadata?: [{
		annotations?: [_]: string
		generate_name?: string
		generation?:    number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
	spec?: [{
		access_modes?: [string, ...]
		resources?: [{
			limits: [_]:   string
			requests: [_]: string
		}, ...]
		storage_class_name?: string
		volume_name?:        string
		selector?: [{
			match_labels?: [_]: string
			match_expressions?: [{
				key?:      string
				operator?: string
				values?: [string, ...]
			}, ...]
		}, ...]
	}, ...]
}
#KubernetesPodDataSource: {
	id?: string
	spec?: [{
		active_deadline_seconds: number
		affinity: [{
			node_affinity: [{
				preferred_during_scheduling_ignored_during_execution: [{
					preference: [{
						match_expressions: [{
							key:      string
							operator: string
							values: [string, ...]
						}, ...]
					}, ...]
					weight: number
				}, ...]
				required_during_scheduling_ignored_during_execution: [{
					node_selector_term: [{
						match_expressions: [{
							key:      string
							operator: string
							values: [string, ...]
						}, ...]
					}, ...]
				}, ...]
			}, ...]
			pod_affinity: [{
				preferred_during_scheduling_ignored_during_execution: [{
					pod_affinity_term: [{
						label_selector: [{
							match_expressions: [{
								key:      string
								operator: string
								values: [string, ...]
							}, ...]
							match_labels: [_]: string
						}, ...]
						namespaces: [string, ...]
						topology_key: string
					}, ...]
					weight: number
				}, ...]
				required_during_scheduling_ignored_during_execution: [{
					label_selector: [{
						match_expressions: [{
							key:      string
							operator: string
							values: [string, ...]
						}, ...]
						match_labels: [_]: string
					}, ...]
					namespaces: [string, ...]
					topology_key: string
				}, ...]
			}, ...]
			pod_anti_affinity: [{
				preferred_during_scheduling_ignored_during_execution: [{
					pod_affinity_term: [{
						label_selector: [{
							match_expressions: [{
								key:      string
								operator: string
								values: [string, ...]
							}, ...]
							match_labels: [_]: string
						}, ...]
						namespaces: [string, ...]
						topology_key: string
					}, ...]
					weight: number
				}, ...]
				required_during_scheduling_ignored_during_execution: [{
					label_selector: [{
						match_expressions: [{
							key:      string
							operator: string
							values: [string, ...]
						}, ...]
						match_labels: [_]: string
					}, ...]
					namespaces: [string, ...]
					topology_key: string
				}, ...]
			}, ...]
		}, ...]
		automount_service_account_token: bool
		container: [{
			args: [string, ...]
			command: [string, ...]
			env: [{
				name:  string
				value: string
				value_from: [{
					config_map_key_ref: [{
						key:      string
						name:     string
						optional: bool
					}, ...]
					field_ref: [{
						api_version: string
						field_path:  string
					}, ...]
					resource_field_ref: [{
						container_name: string
						resource:       string
					}, ...]
					secret_key_ref: [{
						key:      string
						name:     string
						optional: bool
					}, ...]
				}, ...]
			}, ...]
			env_from: [{
				config_map_ref: [{
					name:     string
					optional: bool
				}, ...]
				prefix: string
				secret_ref: [{
					name:     string
					optional: bool
				}, ...]
			}, ...]
			image:             string
			image_pull_policy: string
			lifecycle: [{
				post_start: [{
					exec: [{
						command: [string, ...]
					}, ...]
					http_get: [{
						host: string
						http_header: [{
							name:  string
							value: string
						}, ...]
						path:   string
						port:   string
						scheme: string
					}, ...]
					tcp_socket: [{
						port: string
					}, ...]
				}, ...]
				pre_stop: [{
					exec: [{
						command: [string, ...]
					}, ...]
					http_get: [{
						host: string
						http_header: [{
							name:  string
							value: string
						}, ...]
						path:   string
						port:   string
						scheme: string
					}, ...]
					tcp_socket: [{
						port: string
					}, ...]
				}, ...]
			}, ...]
			liveness_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			name: string
			port: [{
				container_port: number
				host_ip:        string
				host_port:      number
				name:           string
				protocol:       string
			}, ...]
			readiness_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			resources: [{
				limits: [{
					cpu:    string
					memory: string
				}, ...]
				requests: [{
					cpu:    string
					memory: string
				}, ...]
			}, ...]
			security_context: [{
				allow_privilege_escalation: bool
				capabilities: [{
					add: [string, ...]
					drop: [string, ...]
				}, ...]
				privileged:                bool
				read_only_root_filesystem: bool
				run_as_group:              number
				run_as_non_root:           bool
				run_as_user:               number
				se_linux_options: [{
					level: string
					role:  string
					type:  string
					user:  string
				}, ...]
			}, ...]
			startup_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			stdin:                      bool
			stdin_once:                 bool
			termination_message_path:   string
			termination_message_policy: string
			tty:                        bool
			volume_mount: [{
				mount_path:        string
				mount_propagation: string
				name:              string
				read_only:         bool
				sub_path:          string
			}, ...]
			working_dir: string
		}, ...]
		dns_config: [{
			nameservers: [string, ...]
			option: [{
				name:  string
				value: string
			}, ...]
			searches: [string, ...]
		}, ...]
		dns_policy:           string
		enable_service_links: bool
		host_aliases: [{
			hostnames: [string, ...]
			ip: string
		}, ...]
		host_ipc:     bool
		host_network: bool
		host_pid:     bool
		hostname:     string
		image_pull_secrets: [{
			name: string
		}, ...]
		init_container: [{
			args: [string, ...]
			command: [string, ...]
			env: [{
				name:  string
				value: string
				value_from: [{
					config_map_key_ref: [{
						key:      string
						name:     string
						optional: bool
					}, ...]
					field_ref: [{
						api_version: string
						field_path:  string
					}, ...]
					resource_field_ref: [{
						container_name: string
						resource:       string
					}, ...]
					secret_key_ref: [{
						key:      string
						name:     string
						optional: bool
					}, ...]
				}, ...]
			}, ...]
			env_from: [{
				config_map_ref: [{
					name:     string
					optional: bool
				}, ...]
				prefix: string
				secret_ref: [{
					name:     string
					optional: bool
				}, ...]
			}, ...]
			image:             string
			image_pull_policy: string
			lifecycle: [{
				post_start: [{
					exec: [{
						command: [string, ...]
					}, ...]
					http_get: [{
						host: string
						http_header: [{
							name:  string
							value: string
						}, ...]
						path:   string
						port:   string
						scheme: string
					}, ...]
					tcp_socket: [{
						port: string
					}, ...]
				}, ...]
				pre_stop: [{
					exec: [{
						command: [string, ...]
					}, ...]
					http_get: [{
						host: string
						http_header: [{
							name:  string
							value: string
						}, ...]
						path:   string
						port:   string
						scheme: string
					}, ...]
					tcp_socket: [{
						port: string
					}, ...]
				}, ...]
			}, ...]
			liveness_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			name: string
			port: [{
				container_port: number
				host_ip:        string
				host_port:      number
				name:           string
				protocol:       string
			}, ...]
			readiness_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			resources: [{
				limits: [{
					cpu:    string
					memory: string
				}, ...]
				requests: [{
					cpu:    string
					memory: string
				}, ...]
			}, ...]
			security_context: [{
				allow_privilege_escalation: bool
				capabilities: [{
					add: [string, ...]
					drop: [string, ...]
				}, ...]
				privileged:                bool
				read_only_root_filesystem: bool
				run_as_group:              number
				run_as_non_root:           bool
				run_as_user:               number
				se_linux_options: [{
					level: string
					role:  string
					type:  string
					user:  string
				}, ...]
			}, ...]
			startup_probe: [{
				exec: [{
					command: [string, ...]
				}, ...]
				failure_threshold: number
				http_get: [{
					host: string
					http_header: [{
						name:  string
						value: string
					}, ...]
					path:   string
					port:   string
					scheme: string
				}, ...]
				initial_delay_seconds: number
				period_seconds:        number
				success_threshold:     number
				tcp_socket: [{
					port: string
				}, ...]
				timeout_seconds: number
			}, ...]
			stdin:                      bool
			stdin_once:                 bool
			termination_message_path:   string
			termination_message_policy: string
			tty:                        bool
			volume_mount: [{
				mount_path:        string
				mount_propagation: string
				name:              string
				read_only:         bool
				sub_path:          string
			}, ...]
			working_dir: string
		}, ...]
		node_name: string
		node_selector: [_]: string
		priority_class_name: string
		readiness_gate: [{
			condition_type: string
		}, ...]
		restart_policy: string
		security_context: [{
			fs_group:        number
			run_as_group:    number
			run_as_non_root: bool
			run_as_user:     number
			se_linux_options: [{
				level: string
				role:  string
				type:  string
				user:  string
			}, ...]
			supplemental_groups: [number, ...]
			sysctl: [{
				name:  string
				value: string
			}, ...]
		}, ...]
		service_account_name:             string
		share_process_namespace:          bool
		subdomain:                        string
		termination_grace_period_seconds: number
		toleration: [{
			effect:             string
			key:                string
			operator:           string
			toleration_seconds: string
			value:              string
		}, ...]
		volume: [{
			aws_elastic_block_store: [{
				fs_type:   string
				partition: number
				read_only: bool
				volume_id: string
			}, ...]
			azure_disk: [{
				caching_mode:  string
				data_disk_uri: string
				disk_name:     string
				fs_type:       string
				kind:          string
				read_only:     bool
			}, ...]
			azure_file: [{
				read_only:   bool
				secret_name: string
				share_name:  string
			}, ...]
			ceph_fs: [{
				monitors: [string, ...]
				path:        string
				read_only:   bool
				secret_file: string
				secret_ref: [{
					name:      string
					namespace: string
				}, ...]
				user: string
			}, ...]
			cinder: [{
				fs_type:   string
				read_only: bool
				volume_id: string
			}, ...]
			config_map: [{
				default_mode: string
				items: [{
					key:  string
					mode: string
					path: string
				}, ...]
				name:     string
				optional: bool
			}, ...]
			csi: [{
				controller_expand_secret_ref: [{
					name:      string
					namespace: string
				}, ...]
				controller_publish_secret_ref: [{
					name:      string
					namespace: string
				}, ...]
				driver:  string
				fs_type: string
				node_publish_secret_ref: [{
					name:      string
					namespace: string
				}, ...]
				node_stage_secret_ref: [{
					name:      string
					namespace: string
				}, ...]
				read_only: bool
				volume_attributes: [_]: string
				volume_handle: string
			}, ...]
			downward_api: [{
				default_mode: string
				items: [{
					field_ref: [{
						api_version: string
						field_path:  string
					}, ...]
					mode: string
					path: string
					resource_field_ref: [{
						container_name: string
						quantity:       string
						resource:       string
					}, ...]
				}, ...]
			}, ...]
			empty_dir: [{
				medium:     string
				size_limit: string
			}, ...]
			fc: [{
				fs_type:   string
				lun:       number
				read_only: bool
				target_ww_ns: [string, ...]
			}, ...]
			flex_volume: [{
				driver:  string
				fs_type: string
				options: [_]: string
				read_only: bool
				secret_ref: [{
					name:      string
					namespace: string
				}, ...]
			}, ...]
			flocker: [{
				dataset_name: string
				dataset_uuid: string
			}, ...]
			gce_persistent_disk: [{
				fs_type:   string
				partition: number
				pd_name:   string
				read_only: bool
			}, ...]
			git_repo: [{
				directory:  string
				repository: string
				revision:   string
			}, ...]
			glusterfs: [{
				endpoints_name: string
				path:           string
				read_only:      bool
			}, ...]
			host_path: [{
				path: string
				type: string
			}, ...]
			iscsi: [{
				fs_type:         string
				iqn:             string
				iscsi_interface: string
				lun:             number
				read_only:       bool
				target_portal:   string
			}, ...]
			local: [{
				path: string
			}, ...]
			name: string
			nfs: [{
				path:      string
				read_only: bool
				server:    string
			}, ...]
			persistent_volume_claim: [{
				claim_name: string
				read_only:  bool
			}, ...]
			photon_persistent_disk: [{
				fs_type: string
				pd_id:   string
			}, ...]
			projected: [{
				default_mode: string
				sources: [{
					config_map: [{
						items: [{
							key:  string
							mode: string
							path: string
						}, ...]
						name:     string
						optional: bool
					}, ...]
					downward_api: [{
						items: [{
							field_ref: [{
								api_version: string
								field_path:  string
							}, ...]
							mode: string
							path: string
							resource_field_ref: [{
								container_name: string
								quantity:       string
								resource:       string
							}, ...]
						}, ...]
					}, ...]
					secret: [{
						items: [{
							key:  string
							mode: string
							path: string
						}, ...]
						name:     string
						optional: bool
					}, ...]
					service_account_token: [{
						audience:           string
						expiration_seconds: number
						path:               string
					}, ...]
				}, ...]
			}, ...]
			quobyte: [{
				group:     string
				read_only: bool
				registry:  string
				user:      string
				volume:    string
			}, ...]
			rbd: [{
				ceph_monitors: [string, ...]
				fs_type:    string
				keyring:    string
				rados_user: string
				rbd_image:  string
				rbd_pool:   string
				read_only:  bool
				secret_ref: [{
					name:      string
					namespace: string
				}, ...]
			}, ...]
			secret: [{
				default_mode: string
				items: [{
					key:  string
					mode: string
					path: string
				}, ...]
				optional:    bool
				secret_name: string
			}, ...]
			vsphere_volume: [{
				fs_type:     string
				volume_path: string
			}, ...]
		}, ...]
	}, ...]
	status?: string
	metadata?: [{
		annotations?: [_]: string
		generate_name?: string
		generation?:    number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesSecretDataSource: {
	data?: [_]: string
	id?:   string
	type?: string
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesServiceDataSource: {
	id?: string
	load_balancer_ingress?: [{
		hostname: string
		ip:       string
	}, ...]
	spec?: [{
		cluster_ip: string
		external_ips: [string, ...]
		external_name:           string
		external_traffic_policy: string
		health_check_node_port:  number
		load_balancer_ip:        string
		load_balancer_source_ranges: [string, ...]
		port: [{
			name:        string
			node_port:   number
			port:        number
			protocol:    string
			target_port: string
		}, ...]
		publish_not_ready_addresses: bool
		selector: [_]: string
		session_affinity: string
		type:             string
	}, ...]
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesServiceAccountDataSource: {
	automount_service_account_token?: bool
	default_secret_name?:             string
	id?:                              string
	image_pull_secret?: [{
		name: string
	}, ...]
	secret?: [{
		name: string
	}, ...]
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		namespace?:        string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#KubernetesStorageClassDataSource: {
	allow_volume_expansion?: bool
	id?:                     string
	mount_options?: [string, ...]
	parameters?: [_]: string
	reclaim_policy?:      string
	storage_provisioner?: string
	metadata?: [{
		annotations?: [_]: string
		generation?: number
		labels?: [_]: string
		name?:             string
		resource_version?: string
		self_link?:        string
		uid?:              string
	}, ...]
}
#DataSources: {
	kubernetes_all_namespaces?: [_]:          #KubernetesAllNamespacesDataSource
	kubernetes_config_map?: [_]:              #KubernetesConfigMapDataSource
	kubernetes_ingress?: [_]:                 #KubernetesIngressDataSource
	kubernetes_namespace?: [_]:               #KubernetesNamespaceDataSource
	kubernetes_persistent_volume_claim?: [_]: #KubernetesPersistentVolumeClaimDataSource
	kubernetes_pod?: [_]:                     #KubernetesPodDataSource
	kubernetes_secret?: [_]:                  #KubernetesSecretDataSource
	kubernetes_service?: [_]:                 #KubernetesServiceDataSource
	kubernetes_service_account?: [_]:         #KubernetesServiceAccountDataSource
	kubernetes_storage_class?: [_]:           #KubernetesStorageClassDataSource
}
